{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to ETL project documentation\n\uf0c1\n\n\nThis web-page contains documentation for \nExtract Transform Load\n - \nETL\n application developed during\n\n\"Hurtownie danych\"\n course at \nCracow University of Economics 2018\n.\n\n\nThis documentation contains in-depth explanation how ETL application has been developed \nas well as what stack of technology was used to create it.\n\n\nIt also provides reader with a simple \nuser guide\n and \nfeature explanation\n.\n\n\nIt is designed to provide everybody who is interested with simple instructions \nand explanations to modules implemented in ETL project.\n\n\nThis documentation covers \nonly\n custom functions and libraries, \nwhich were created by project team. It only lightly touches functionality \nof framework where it is necessary for explanation.\n\n\nPlease choose a topic from the \nTable of Contents\n at the left side.\n\n\nProject team\n\uf0c1\n\n\n\n\n\n\n\n\nStudent ID\n\n\nName\n\n\nSurname\n\n\nGroup\n\n\n\n\n\n\n\n\n\n\n172911\n\n\nViacheslav\n\n\nBabanin\n\n\nWZISN2-1111\n\n\n\n\n\n\n213707\n\n\nArkadiusz\n\n\nKadzik\n\n\nWZISN2-1111\n\n\n\n\n\n\n187207\n\n\nMicha\u0142\n\n\nLeszkiewicz\n\n\nWZISN2-1111",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-etl-project-documentation",
            "text": "This web-page contains documentation for  Extract Transform Load  -  ETL  application developed during \"Hurtownie danych\"  course at  Cracow University of Economics 2018 .  This documentation contains in-depth explanation how ETL application has been developed \nas well as what stack of technology was used to create it.  It also provides reader with a simple  user guide  and  feature explanation .  It is designed to provide everybody who is interested with simple instructions \nand explanations to modules implemented in ETL project.  This documentation covers  only  custom functions and libraries, \nwhich were created by project team. It only lightly touches functionality \nof framework where it is necessary for explanation.  Please choose a topic from the  Table of Contents  at the left side.",
            "title": "Welcome to ETL project documentation"
        },
        {
            "location": "/#project-team",
            "text": "Student ID  Name  Surname  Group      172911  Viacheslav  Babanin  WZISN2-1111    213707  Arkadiusz  Kadzik  WZISN2-1111    187207  Micha\u0142  Leszkiewicz  WZISN2-1111",
            "title": "Project team"
        },
        {
            "location": "/installation/",
            "text": "Downloading Application\n\uf0c1\n\n\nGithub\n\uf0c1\n\n\n\n\n\n\nYou can download .zip from application's \npublic github repository\n.\n\n\n\n\n\n\nOr you can clone branch by using \n\n\ngit clone https://github.com/Vjatches/etlproject.git\n \n\n\n\n\n\n\nEnvironment Requirements\n\uf0c1\n\n\n\n\nApache or NginX web server\n\n\nPhP v5.6.30 - v7.1.23 (higher versions were not tested) with following modules enabled\n\n\nphp_pdo_mysql\n\n\nphp_mongo\n\n\nphp_mongodb\n\n\n\n\n\n\nLocal MySQL Database client version v5.0.11 - v8.0.12 (higher version were not tested)\n\n\n\n\nInstallation Instructions\n\uf0c1\n\n\n\n\n\n\nDownload Application from \ngit repository\n\n or by using \ngit clone https://github.com/Vjatches/etlproject.git\n.\n\n\n\n\n\n\nUnpack application into \npublic_html\n folder of your web-server.\n\n\n\n\n\n\nOpen file \napplication/config/config.php\n and change value of \nBASE_URL\n to base url of your web server.\nBase URL has to point to \nindex.php\n file of application.\n\n\n\n\n\n\nImport SQL database with all required schemas and tables from \nwarehouse.sql\n file which you will find in \nsql\n directory of the project.\n\n\n\n\n\n\nOpen URL which you provided at step 3 in browser to access application.",
            "title": "Installation"
        },
        {
            "location": "/installation/#downloading-application",
            "text": "",
            "title": "Downloading Application"
        },
        {
            "location": "/installation/#github",
            "text": "You can download .zip from application's  public github repository .    Or you can clone branch by using   git clone https://github.com/Vjatches/etlproject.git",
            "title": "Github"
        },
        {
            "location": "/installation/#environment-requirements",
            "text": "Apache or NginX web server  PhP v5.6.30 - v7.1.23 (higher versions were not tested) with following modules enabled  php_pdo_mysql  php_mongo  php_mongodb    Local MySQL Database client version v5.0.11 - v8.0.12 (higher version were not tested)",
            "title": "Environment Requirements"
        },
        {
            "location": "/installation/#installation-instructions",
            "text": "Download Application from  git repository \n or by using  git clone https://github.com/Vjatches/etlproject.git .    Unpack application into  public_html  folder of your web-server.    Open file  application/config/config.php  and change value of  BASE_URL  to base url of your web server.\nBase URL has to point to  index.php  file of application.    Import SQL database with all required schemas and tables from  warehouse.sql  file which you will find in  sql  directory of the project.    Open URL which you provided at step 3 in browser to access application.",
            "title": "Installation Instructions"
        },
        {
            "location": "/overview/",
            "text": "Getting Started\n\uf0c1\n\n\nThis application has been developed using CodeIgniter PHP application framework.\n\n\nThis documentation mostly focuses on an application itself and keeps trying to provide as little framework-specific explanations as possible.\n\n\nFor any questions regarding framework functionality this documentation will try to refer to official \nCodeIgniter User Guide\n.\n\n\nQuick chapter overview\n\uf0c1\n\n\nThe following \nOverview\n chapter covers general overview of application and implemented functionality as well as an MVC structure of an application.\n\n\nMore in-depth process-flow, diagrams and structures are presented in \nApplication Flow\n chapter of this documentation.\n\n\nIf you want a quick screenshot-based overview of functionality please refer to \nHOW-TO Use\n chapter.\n\n\nChapters \nController\n, \nModels\n and \nViews\n contain technical and detailed explanation with code samples how the main back-end structure of an application is programmed.\n\n\nChapters \nLibraries\n and \nHelpers\n cover secondary functions and classes which are used during main application flow.\n\n\nRouting\n chapter covers rules and patterns which are used to configure URI building for application pages.\n\n\nFrontend\n and \nStylesheet\n chapters refer to frontend logic and libraries used to implement styling and some of the presentation logic.\n\n\nETL application at a Glance\n\uf0c1\n\n\nThis application was developed as a part of university project during first year of CS Masters studies\nat Cracow University of Economics during \n\"Hurtownie Danych\"\n course. The purpose of this application is \neducational only\n\nand it is not intended for any commercial or scientific research use. \n\n\nThe aim of this application is to demonstrate\nthat project team understands what ETL process is and how to implement it in chosen technology according to \ncourse\nsyllabus\n\n\nWhat does it do? - Extract Transform Load\n\uf0c1\n\n\nThe main purpose of an application is to provide web-based, GUI-based service which implements nad demonstrates\nbasic ETL processes: Extract, Transform and Load.\n\n\nETL Processes are executed in sequential manner although it is possible to configure application to be able to repeat\neach module (Extract, Transform and Load) before proceeding to next one.\n\n\n\n\nAdditionally, it present user an option to monitor temporary and target databases to observe ETL process during it lifecycle.\nThis function is implemented as a basic CRUD-like module which allows to browse databases and perform simple queries and filters.\n\n\nTo the full description of application's functionality please refer to \nHOW-TO Use\n chapter of this documentation.\n\n\nWhat does it cover? - Allegro\n\uf0c1\n\n\nETL application was originally designed by project team, according to course requirements, to perform web-scraping of \none\n of the categories\nof popular e-commerce platform \nallegro.pl\n. But during the development process it evolved into \nflexible and universal parser which covers \nthe whole platform\n.\n\n\nWeb scraping is still category-based but category can be changed from application GUI so the user can perform\nETL process for the range of products that he is the most interested in.\n\n\nHow was it made? - Stack of Technology Used\n\uf0c1\n\n\nETL Project\n is mostly a PHP-based full-stack application. It was developed in \nCodeIgniter\n web application framework.\n\n\nFollowing libraries and technologies were used during application development:\n\n\n\n\nFrontend\n\n\njQuery v3.3.1\n\n\njQuery JSON-Viewer Plugin\n\n\njQuery Confirm v3.3.0\n\n\n\n\n\n\nStyling\n\n\nBootstrap v3.3.7 JS CSS HTML Framework\n\n\nSCSS Extension\n\n\nScoutAPP v2.12.12 SASS/SCSS processor\n\n\n\n\n\n\nBackend\n\n\nCodeIgniter v3.1.9 Application Framework\n\n\nMongoDB PHP Library v1.4.2\n\n\nSymfony/DOM-Crawler\n\n\nClue/ReactPHP PHP Multithreading\n\n\n\n\n\n\nDatabases\n\n\nMySQL Community Server v5.6.39\n\n\nMongoDB Atlas Cloud Based DaaS\n\n\n\n\n\n\nWAMP Stack\n\n\nBitnami WAMP Stack: Apache+MySQL+PHP\n\n\n\n\n\n\nVersion Control\n\n\nGithub Git Platform\n\n\nGitKraken Git Client\n    \n\n\n\n\n\n\nIntegrated Development Environment\n\n\nJetBrains PhpStorm\n\n\n\n\n\n\nDocumentation Engine\n\n\nMkDocs - Project Documentation with Markdown\n\n\n\n\n\n\n\n\nImplemented Techniques\n\uf0c1\n\n\nFollowing functionality and techniques has been implemented in \nETL Project\n application.\n\n\n\n\nWEB scraping.\n\n\nDistributed Page Application Architecture.\n\n\nCRUD Operations on Relational and Non-Relational databases.\n\n\nMongoDB Aggregation Framework.\n\n\nDatabase-based application configuration.\n\n\nCSV report generation.\n\n\nScalable application template.\n\n\nMVC pattern.\n\n\nMulti-threading, queued requests.\n\n\nNON-Relational to Relational DBS Data Migration and Transformation.\n\n\nConfigurable application flow.\n\n\nFlexible URI routing\n\n\n\n\nModel-View-Controller\n\uf0c1\n\n\nETL application was built with MVC programming pattern in mind. \n\n\nIt was designed around one central controller and several models each of which handles logic of an\nindependent module. \n\n\nThe following graphic illustrates how data flows through the system. \n\n\n\n\nSource: \nCodeIgniter Documentation\n\n\n\n\nThe index.php serves as the front controller, initializing the base resources needed to run CodeIgniter.\n\n\nThe Router examines the HTTP request to determine what should be done with it.\n\n\nIf a cache file exists, it is sent directly to the browser, bypassing the normal system execution.\n\n\nSecurity. Before the application controller is loaded, the HTTP request and any user submitted data is filtered for security.\n\n\nThe Controller loads the models, core libraries, helpers, and any other resources needed to process the specific request.\n\n\nThe finalized View is rendered then sent to the web browser to be seen. If caching is enabled, the view is cached first so that on subsequent requests it can be served.",
            "title": "General Overview"
        },
        {
            "location": "/overview/#getting-started",
            "text": "This application has been developed using CodeIgniter PHP application framework.  This documentation mostly focuses on an application itself and keeps trying to provide as little framework-specific explanations as possible.  For any questions regarding framework functionality this documentation will try to refer to official  CodeIgniter User Guide .",
            "title": "Getting Started"
        },
        {
            "location": "/overview/#quick-chapter-overview",
            "text": "The following  Overview  chapter covers general overview of application and implemented functionality as well as an MVC structure of an application.  More in-depth process-flow, diagrams and structures are presented in  Application Flow  chapter of this documentation.  If you want a quick screenshot-based overview of functionality please refer to  HOW-TO Use  chapter.  Chapters  Controller ,  Models  and  Views  contain technical and detailed explanation with code samples how the main back-end structure of an application is programmed.  Chapters  Libraries  and  Helpers  cover secondary functions and classes which are used during main application flow.  Routing  chapter covers rules and patterns which are used to configure URI building for application pages.  Frontend  and  Stylesheet  chapters refer to frontend logic and libraries used to implement styling and some of the presentation logic.",
            "title": "Quick chapter overview"
        },
        {
            "location": "/overview/#etl-application-at-a-glance",
            "text": "This application was developed as a part of university project during first year of CS Masters studies\nat Cracow University of Economics during  \"Hurtownie Danych\"  course. The purpose of this application is  educational only \nand it is not intended for any commercial or scientific research use.   The aim of this application is to demonstrate\nthat project team understands what ETL process is and how to implement it in chosen technology according to  course\nsyllabus",
            "title": "ETL application at a Glance"
        },
        {
            "location": "/overview/#what-does-it-do-extract-transform-load",
            "text": "The main purpose of an application is to provide web-based, GUI-based service which implements nad demonstrates\nbasic ETL processes: Extract, Transform and Load.  ETL Processes are executed in sequential manner although it is possible to configure application to be able to repeat\neach module (Extract, Transform and Load) before proceeding to next one.   Additionally, it present user an option to monitor temporary and target databases to observe ETL process during it lifecycle.\nThis function is implemented as a basic CRUD-like module which allows to browse databases and perform simple queries and filters.  To the full description of application's functionality please refer to  HOW-TO Use  chapter of this documentation.",
            "title": "What does it do? - Extract Transform Load"
        },
        {
            "location": "/overview/#what-does-it-cover-allegro",
            "text": "ETL application was originally designed by project team, according to course requirements, to perform web-scraping of  one  of the categories\nof popular e-commerce platform  allegro.pl . But during the development process it evolved into \nflexible and universal parser which covers  the whole platform .  Web scraping is still category-based but category can be changed from application GUI so the user can perform\nETL process for the range of products that he is the most interested in.",
            "title": "What does it cover? - Allegro"
        },
        {
            "location": "/overview/#how-was-it-made-stack-of-technology-used",
            "text": "ETL Project  is mostly a PHP-based full-stack application. It was developed in  CodeIgniter  web application framework.  Following libraries and technologies were used during application development:   Frontend  jQuery v3.3.1  jQuery JSON-Viewer Plugin  jQuery Confirm v3.3.0    Styling  Bootstrap v3.3.7 JS CSS HTML Framework  SCSS Extension  ScoutAPP v2.12.12 SASS/SCSS processor    Backend  CodeIgniter v3.1.9 Application Framework  MongoDB PHP Library v1.4.2  Symfony/DOM-Crawler  Clue/ReactPHP PHP Multithreading    Databases  MySQL Community Server v5.6.39  MongoDB Atlas Cloud Based DaaS    WAMP Stack  Bitnami WAMP Stack: Apache+MySQL+PHP    Version Control  Github Git Platform  GitKraken Git Client         Integrated Development Environment  JetBrains PhpStorm    Documentation Engine  MkDocs - Project Documentation with Markdown",
            "title": "How was it made? - Stack of Technology Used"
        },
        {
            "location": "/overview/#implemented-techniques",
            "text": "Following functionality and techniques has been implemented in  ETL Project  application.   WEB scraping.  Distributed Page Application Architecture.  CRUD Operations on Relational and Non-Relational databases.  MongoDB Aggregation Framework.  Database-based application configuration.  CSV report generation.  Scalable application template.  MVC pattern.  Multi-threading, queued requests.  NON-Relational to Relational DBS Data Migration and Transformation.  Configurable application flow.  Flexible URI routing",
            "title": "Implemented Techniques"
        },
        {
            "location": "/overview/#model-view-controller",
            "text": "ETL application was built with MVC programming pattern in mind.   It was designed around one central controller and several models each of which handles logic of an\nindependent module.   The following graphic illustrates how data flows through the system.    Source:  CodeIgniter Documentation   The index.php serves as the front controller, initializing the base resources needed to run CodeIgniter.  The Router examines the HTTP request to determine what should be done with it.  If a cache file exists, it is sent directly to the browser, bypassing the normal system execution.  Security. Before the application controller is loaded, the HTTP request and any user submitted data is filtered for security.  The Controller loads the models, core libraries, helpers, and any other resources needed to process the specific request.  The finalized View is rendered then sent to the web browser to be seen. If caching is enabled, the view is cached first so that on subsequent requests it can be served.",
            "title": "Model-View-Controller"
        },
        {
            "location": "/tutorial/",
            "text": "Interface Overview\n\uf0c1\n\n\nApplication interface consists of 3 main parts:\n\n\n\n\n\n\nTop bar Menu\n\n\n\n\n\n\n\n\nSide bar Menu\n\n\n\n\n\n\n\n\nApplication Plane\n\n\n\n\n\n\nTop bar and side bar are used to navigate between application modules and pages.\n\n\nApplication Plane contains application windows and usually is different for different modules.\n\n\nBasic Usage\n\uf0c1\n\n\nTo open main application interface locate \nHome\n button on a top bar menu and press it.\n\n\nAlternatively, chose one of the modules at side bar menu and click respective button to navigate to this module.\n\n\nTop bar navigation\n\uf0c1\n\n\nTop bar menu consist of 3 elements:\n\n \nHome\n - main gui for the ETL process.\n\n \nSettings\n - global configuration for the application. Description of available configuration options can be found at \nSettings\n page.\n* \nDocumentation\n - link to project documentation.\n\n\nSide bar navigation\n\uf0c1\n\n\nSidebar consists of 4 modules:\n\n\n\n\nExtract\n - standalone Extract module, allows user to scrap data from Allegro page and put it into temporal database.\n\n\nTransform\n - standalone Transform module, allows user to specify data set which will be aggregated and processed from extracted data.\n\n\nLoad\n - standalone Load module, allows user to perform process of loading transformed data to target data-warehouse.\n\n\nMonitor DB\n - CRUD-like analysing and monitoring module, allows user to analyse data at every step of ETL process.\n\n\nE: Mongo\n (Extract MongoDB) - interface which allows user to query Mongo DB Collection \nproducts\n where raw data from html lands.\n\n\nT: Mongo\n (Transform MongoDB) - interface which allows user to query Mongo DB Collection \naggregated\n where aggregated selected data lands during transform.\n\n\nT: SQL\n (Transform SQL) - interface which allows user to query SQL Table with structured data with converted data-types after full transform.\n\n\nL: SQL\n (Load SQL) - interface which allows user to query SQL Table which represents target Data Warehouse.\n\n\n\n\n\n\n\n\nETL Home Main Application\n\uf0c1\n\n\nThis page can be accessed by clicking \nHome\n button.\n\n\nMain application consists of 4 windows, which represent 4 modules to configure before running ETL process.\n\n\n\n\nExtract options window allows to set value which tells how much pages would be extracted from Allegro category.\n\n\n\n\nTransform options window allows to specify a set of parameters which will be chosen to aggregate and transform.\n\n\n\n\nLoad options window allows to set a limit on how many of extracted records will be inserted into data warehouse.\n\n\nProviding 0 results means there will be no limit.\n\n\n\n\nFinal window allows to chose a set of temporal data structures which will be cleaned up after ETL process. \n\n\nAnd a \nBIG RED\n button to start ETL process.\n\n\nExtract Module\n\uf0c1\n\n\n\n\nThis module allows to configure and run \nExtract\n part of ETL process.\n\n\nFollowing configuration window prompts user to provide amount of pages to extract from current Allegro category.\n\n\nThis amount should be not less than \n1\n and not more than maximum amount of pages, which is a dynamic value and is taken from current allegro category.\n\n\nTransform Module\n\uf0c1\n\n\n\n\nThis module allows to configure and run \nTransform\n part of ETL process.\n\n\nTransform options window allows to specify a set of parameters which will be chosen to aggregate and transform.\n\n\nIf \"Save as default transform profile\" checkbox is checked, your current selection will be saved as a default for future runs.\n\n\nLoad Module\n\uf0c1\n\n\n\n\nThis module allows to configure and run \nLoad\n part of ETL process.\nwhich we want to load to Data Warehouse.\n\n\nThis amount should not be less than \n1\n and not more than maximum amount of rows in temporal table left after \nTransform\n process.\n\n\nDatabase Monitoring\n\uf0c1\n\n\nThis module is a CRUD-like analysing and monitoring module, which allows user to analyse data at every step of ETL process.\n\n\nSQL Monitoring\n\uf0c1\n\n\nMonitoring interface consists of two parts:\n\n\n\n\n\n\nQuery builder module\n\n\n\n\nUpper area can be used to provide SQL query to the current table. Please, note, that only valid SELECT query \nto only this table will be accepted.\n\n\nLower area contains last performed query. It might be useful for copying previous query for modification\n\n\n\n\n\n\nQuery Result table\n\n\n\n\n\n\n\n\nThis table contains result of the last performed query.\n\n\nIt also might contain (depending on the table) additional buttons which allow to delete everything from current table\nor dump last query result into csv file. \n\n\n\n\nMongoDB Monitoring\n\uf0c1\n\n\nMonitoring interface consists of two parts:\n\n\n\n\n\n\nFilter builder module\n\n\nUpper area can be used to provide MongoDV filter to the current table. Please, note, that only filter in valid JSON format\nwill be accepted.\n\n\nLower area contains last performed query. It might be useful for copying previous query for modification\n\n\n\n\n\n\nApplication Settings\n\uf0c1\n\n\nThis module is accessible by clicking \nSettings\n at the top bar.\n\n\n\n\nCategory link (URL)\n - link to Allegro category, which application will use as a data source for ETL process.\n\n\nFlow restriction level\n - option which allows to regulate restrictions on order of performing ETL processes (Extract, Transform, Load).\nMore on it in the section below.\n\n\nFlow restriction level\n\uf0c1\n\n\nAt any given point of time whole application is at one of the three possible phases. This phases correspond to ETL processes and phase tells what module should be ran next.\n\n\nFor example, if we just performed \nExtract\n then application is at \nTransform\n phase -> application expects that next module that we will run will be \nTransform\n.\n\n\nFlow restriction level\n option allows us to configure this application behavior and to enforce order of execution of modules \nExtract\n, \nTransform\n, \nLoad\n if they are ran separately from sidebar.\n\n\nThere are 3 possible levels of flow restriction:\n\n\n\n\nDevelopment\n - any module might be ran in any order. \n\n\nStrict\n - only module which is equal to the application phase can be ran. Processes are only possible to run consequently.\n\n\nSoft\n - at any phase it is possible to repeat previous process or proceed to next one. \n\n\n\n\nFollowing table summarises which modules are available at which phase.\n\n\n\n\n\n\n\n\nRestriction level\n\n\nPhase\n\n\nModule\n\n\n\n\n\n\n\n\n\n\nDevelopment\n\n\nAny\n\n\nAny\n\n\n\n\n\n\nStrict\n\n\nExtract\n\n\nExtract\n\n\n\n\n\n\nStrict\n\n\nTransform\n\n\nTransform\n\n\n\n\n\n\nStrict\n\n\nLoad\n\n\nLoad\n\n\n\n\n\n\nSoft\n\n\nExtract\n\n\nLoad or Extract\n\n\n\n\n\n\nSoft\n\n\nTransform\n\n\nExtract or Transform\n\n\n\n\n\n\nSoft\n\n\nLoad\n\n\nTransform or Load\n\n\n\n\n\n\n\n\nIf user will try to access wrong module he will see following \nerror\n with a hint on which module should be used now.",
            "title": "Tutorial"
        },
        {
            "location": "/tutorial/#interface-overview",
            "text": "Application interface consists of 3 main parts:    Top bar Menu     Side bar Menu     Application Plane    Top bar and side bar are used to navigate between application modules and pages.  Application Plane contains application windows and usually is different for different modules.",
            "title": "Interface Overview"
        },
        {
            "location": "/tutorial/#basic-usage",
            "text": "To open main application interface locate  Home  button on a top bar menu and press it.  Alternatively, chose one of the modules at side bar menu and click respective button to navigate to this module.",
            "title": "Basic Usage"
        },
        {
            "location": "/tutorial/#top-bar-navigation",
            "text": "Top bar menu consist of 3 elements:   Home  - main gui for the ETL process.   Settings  - global configuration for the application. Description of available configuration options can be found at  Settings  page.\n*  Documentation  - link to project documentation.",
            "title": "Top bar navigation"
        },
        {
            "location": "/tutorial/#side-bar-navigation",
            "text": "Sidebar consists of 4 modules:   Extract  - standalone Extract module, allows user to scrap data from Allegro page and put it into temporal database.  Transform  - standalone Transform module, allows user to specify data set which will be aggregated and processed from extracted data.  Load  - standalone Load module, allows user to perform process of loading transformed data to target data-warehouse.  Monitor DB  - CRUD-like analysing and monitoring module, allows user to analyse data at every step of ETL process.  E: Mongo  (Extract MongoDB) - interface which allows user to query Mongo DB Collection  products  where raw data from html lands.  T: Mongo  (Transform MongoDB) - interface which allows user to query Mongo DB Collection  aggregated  where aggregated selected data lands during transform.  T: SQL  (Transform SQL) - interface which allows user to query SQL Table with structured data with converted data-types after full transform.  L: SQL  (Load SQL) - interface which allows user to query SQL Table which represents target Data Warehouse.",
            "title": "Side bar navigation"
        },
        {
            "location": "/tutorial/#etl-home-main-application",
            "text": "This page can be accessed by clicking  Home  button.  Main application consists of 4 windows, which represent 4 modules to configure before running ETL process.   Extract options window allows to set value which tells how much pages would be extracted from Allegro category.   Transform options window allows to specify a set of parameters which will be chosen to aggregate and transform.   Load options window allows to set a limit on how many of extracted records will be inserted into data warehouse.  Providing 0 results means there will be no limit.   Final window allows to chose a set of temporal data structures which will be cleaned up after ETL process.   And a  BIG RED  button to start ETL process.",
            "title": "ETL Home Main Application"
        },
        {
            "location": "/tutorial/#extract-module",
            "text": "This module allows to configure and run  Extract  part of ETL process.  Following configuration window prompts user to provide amount of pages to extract from current Allegro category.  This amount should be not less than  1  and not more than maximum amount of pages, which is a dynamic value and is taken from current allegro category.",
            "title": "Extract Module"
        },
        {
            "location": "/tutorial/#transform-module",
            "text": "This module allows to configure and run  Transform  part of ETL process.  Transform options window allows to specify a set of parameters which will be chosen to aggregate and transform.  If \"Save as default transform profile\" checkbox is checked, your current selection will be saved as a default for future runs.",
            "title": "Transform Module"
        },
        {
            "location": "/tutorial/#load-module",
            "text": "This module allows to configure and run  Load  part of ETL process.\nwhich we want to load to Data Warehouse.  This amount should not be less than  1  and not more than maximum amount of rows in temporal table left after  Transform  process.",
            "title": "Load Module"
        },
        {
            "location": "/tutorial/#database-monitoring",
            "text": "This module is a CRUD-like analysing and monitoring module, which allows user to analyse data at every step of ETL process.",
            "title": "Database Monitoring"
        },
        {
            "location": "/tutorial/#sql-monitoring",
            "text": "Monitoring interface consists of two parts:    Query builder module   Upper area can be used to provide SQL query to the current table. Please, note, that only valid SELECT query \nto only this table will be accepted.  Lower area contains last performed query. It might be useful for copying previous query for modification    Query Result table     This table contains result of the last performed query.  It also might contain (depending on the table) additional buttons which allow to delete everything from current table\nor dump last query result into csv file.",
            "title": "SQL Monitoring"
        },
        {
            "location": "/tutorial/#mongodb-monitoring",
            "text": "Monitoring interface consists of two parts:    Filter builder module  Upper area can be used to provide MongoDV filter to the current table. Please, note, that only filter in valid JSON format\nwill be accepted.  Lower area contains last performed query. It might be useful for copying previous query for modification",
            "title": "MongoDB Monitoring"
        },
        {
            "location": "/tutorial/#application-settings",
            "text": "This module is accessible by clicking  Settings  at the top bar.   Category link (URL)  - link to Allegro category, which application will use as a data source for ETL process.  Flow restriction level  - option which allows to regulate restrictions on order of performing ETL processes (Extract, Transform, Load).\nMore on it in the section below.",
            "title": "Application Settings"
        },
        {
            "location": "/tutorial/#flow-restriction-level",
            "text": "At any given point of time whole application is at one of the three possible phases. This phases correspond to ETL processes and phase tells what module should be ran next.  For example, if we just performed  Extract  then application is at  Transform  phase -> application expects that next module that we will run will be  Transform .  Flow restriction level  option allows us to configure this application behavior and to enforce order of execution of modules  Extract ,  Transform ,  Load  if they are ran separately from sidebar.  There are 3 possible levels of flow restriction:   Development  - any module might be ran in any order.   Strict  - only module which is equal to the application phase can be ran. Processes are only possible to run consequently.  Soft  - at any phase it is possible to repeat previous process or proceed to next one.    Following table summarises which modules are available at which phase.     Restriction level  Phase  Module      Development  Any  Any    Strict  Extract  Extract    Strict  Transform  Transform    Strict  Load  Load    Soft  Extract  Load or Extract    Soft  Transform  Extract or Transform    Soft  Load  Transform or Load     If user will try to access wrong module he will see following  error  with a hint on which module should be used now.",
            "title": "Flow restriction level"
        },
        {
            "location": "/flow/",
            "text": "Model-View-Controller\n\uf0c1\n\n\nApplication is developed using Model-View-Controller programming pattern.\n\n\nApplication makes use of one central controller, 4 models and a bucket of views.\n\n\nViews render and present data to user. Models retrieve and process data from data-sources such as remote Allegro pages\nand databases. Controller passes data between views, models and also handles URL routing for the web pages.\n\n\nThe following graphic illustrates how data flows through the MVC system. \n\n\n\n\nStructure, which was presented above is supported by following system, implemented in the core of the CodeIgniter framework.\n\n\n\n\nApplication Flow\n\uf0c1\n\n\nDetailed application flow chart is as follows:\n\n\n\n\nHow does it work?\n\uf0c1\n\n\nExtract\n\uf0c1\n\n\n\n\nExtract scraps first page of the provided category and presents user amount of pages in this category.\n\n\nUser specifies amount of pages which he wants to extract and hits the \nEXTRACT\n button.\n\n\nApplication loops through through category pages and collects links to products from each page. Each page contains about 64 links.\n\n\nObject of the class \nSymfony\\Domcrawler\n is created for each product page, which emulates web-browser and opens the page.\n\n\nCrawlers are sent in a multi-threaded manner, in a queue 10 at a time.\n\n\nAfter getting the page Crawler cuts out part of the javascript in this page which contains json object of a product which is described at this page.\n\n\nObject is processed using regex and some logic and is validates as a proper json-object.\n\n\nJson-object is added to a bulk which, when is full, will be inserted to a temporal \nextracted\n collection in MongoDB database as a multidimensional nested object with raw data.\n\n\nProcess result: MongoDB Collection \nextracted\n with raw data.\n\n\n\n\nTransform\n\uf0c1\n\n\n\n\nUser specifies list of properties which he wills to aggregate from raw data received after Extract process and hits the \nTransform\n button.\n\n\nTemporal collection with aggregated data from previous runs is cleared.\n\n\nAggregation pipeline is formed and \nextracted\n collection is passed through it and the result is dumped into \naggregated\n collection as a simple key->value objects.\n\n\nData from \naggregated\n collection is taken and value-by-value is transformed to an appropriate data type. Columns which were not chosen during user specification are set to \nNULL\n.\n\n\nTransformed data is upserted into MySQL temporal database \ntemp_products\n.\n\n\nProcess result: MongoDB Collection \naggregated\n with one-dimensional key->value data and MySQL table \ntemp_products\n with fully transformed data.\n\n\n\n\nLoad\n\uf0c1\n\n\n\n\nApplication queries \ntemp_products\n table and presents the user how many rows are going to be inserted into database.\n\n\nUser specifies amount of rows which he want to insert and hits the \nLOAD\n button.\n\n\nApplication selects all rows from \ntemp_products\n table and appends to each one a timestamp which consists from 4 rows:\n\ncreate_date\n, \ncreate_id\n, \nmodify_date\n, \nmodify_id\n which contain information about identity\nof creator, modifier and creation/modification timestamp.\n\n\nData is upserted into target table \nproducts\n which represents data warehouse.\n\n\nProcess result: MySQL table \nproducts\n.\n\n\n\n\nClass UML\n\uf0c1\n\n\n\n\nCore of the application consists of 4 Models which are children of \nCI_Model\n framework class.\n\n\nOne controller class \nEtl\n is used to process data between models and various views.\n\n\nAdditionally, 4 assistant classes are used in various models.",
            "title": "Application Flow"
        },
        {
            "location": "/flow/#model-view-controller",
            "text": "Application is developed using Model-View-Controller programming pattern.  Application makes use of one central controller, 4 models and a bucket of views.  Views render and present data to user. Models retrieve and process data from data-sources such as remote Allegro pages\nand databases. Controller passes data between views, models and also handles URL routing for the web pages.  The following graphic illustrates how data flows through the MVC system.    Structure, which was presented above is supported by following system, implemented in the core of the CodeIgniter framework.",
            "title": "Model-View-Controller"
        },
        {
            "location": "/flow/#application-flow",
            "text": "Detailed application flow chart is as follows:",
            "title": "Application Flow"
        },
        {
            "location": "/flow/#how-does-it-work",
            "text": "",
            "title": "How does it work?"
        },
        {
            "location": "/flow/#extract",
            "text": "Extract scraps first page of the provided category and presents user amount of pages in this category.  User specifies amount of pages which he wants to extract and hits the  EXTRACT  button.  Application loops through through category pages and collects links to products from each page. Each page contains about 64 links.  Object of the class  Symfony\\Domcrawler  is created for each product page, which emulates web-browser and opens the page.  Crawlers are sent in a multi-threaded manner, in a queue 10 at a time.  After getting the page Crawler cuts out part of the javascript in this page which contains json object of a product which is described at this page.  Object is processed using regex and some logic and is validates as a proper json-object.  Json-object is added to a bulk which, when is full, will be inserted to a temporal  extracted  collection in MongoDB database as a multidimensional nested object with raw data.  Process result: MongoDB Collection  extracted  with raw data.",
            "title": "Extract"
        },
        {
            "location": "/flow/#transform",
            "text": "User specifies list of properties which he wills to aggregate from raw data received after Extract process and hits the  Transform  button.  Temporal collection with aggregated data from previous runs is cleared.  Aggregation pipeline is formed and  extracted  collection is passed through it and the result is dumped into  aggregated  collection as a simple key->value objects.  Data from  aggregated  collection is taken and value-by-value is transformed to an appropriate data type. Columns which were not chosen during user specification are set to  NULL .  Transformed data is upserted into MySQL temporal database  temp_products .  Process result: MongoDB Collection  aggregated  with one-dimensional key->value data and MySQL table  temp_products  with fully transformed data.",
            "title": "Transform"
        },
        {
            "location": "/flow/#load",
            "text": "Application queries  temp_products  table and presents the user how many rows are going to be inserted into database.  User specifies amount of rows which he want to insert and hits the  LOAD  button.  Application selects all rows from  temp_products  table and appends to each one a timestamp which consists from 4 rows: create_date ,  create_id ,  modify_date ,  modify_id  which contain information about identity\nof creator, modifier and creation/modification timestamp.  Data is upserted into target table  products  which represents data warehouse.  Process result: MySQL table  products .",
            "title": "Load"
        },
        {
            "location": "/flow/#class-uml",
            "text": "Core of the application consists of 4 Models which are children of  CI_Model  framework class.  One controller class  Etl  is used to process data between models and various views.  Additionally, 4 assistant classes are used in various models.",
            "title": "Class UML"
        },
        {
            "location": "/routing/",
            "text": "URI Routing\n\uf0c1\n\n\nApplication uses built-in CodeIgniter routing mechanism which allows to define or alter rules which regulate interaction with\nthe application from browser URI link.\n\n\nNormal convention is:\n\n\nhttp://example.com/[controller-class]/[controller-method]/[arguments]\n\n\nCodeIgniter reads its routing rules from top to bottom and routes the request to the first matching rule. Each rule is a regular expression (left-side) mapped to a controller and method name separated by slashes (right-side). When a request comes in, CodeIgniter looks for the first match, and calls the appropriate controller and method, possibly with arguments.\n\n\nRouting rules used\n\uf0c1\n\n\nFollowing rules have been used in the application:\n\n\n$route['default_controller'] = 'etl/home';\n\n\n\nDefault page shown, when nothing is provided is the page which is served by \nhome()\n method of \nEtl\n\ncontroller.\n\n\n$route['(:any)']='etl/$1';\n\n\n\nAny page-request after base-url should be directed to \nEtl\n controller and appropriate method is tried to be found.\n\n\n$route['mongo/(:any)'] = 'etl/mongo/$1';\n\n\n\nAny page request after base_url/mongo should be treated as accessing \nmongo()\n method of \nEtl\n controller with an argument specified as \n$1\n in page request.\n\n\n$route['sql/(:any)'] = 'etl/sql/$1';\n\n\n\nAny page request after base_url/sql should be treated as accessing \nsql()\n method of \nEtl\n controller with an argument specified as \n$1\n in page request.\n\n\nClean URI Generation\n\uf0c1\n\n\nBy default, the index.php file is included in URLs:\n\n\nexample.com/index.php/etl/mongo/extracted\n\n\nIf your Apache server has \nmod_rewrite\n enabled, you can easily remove this file by using a .htaccess file with some simple rules. \nHere is an example of such a file, using the \u201cnegative\u201d method in which everything is redirected except the specified items:\n\n\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php/$1 [L]\n\n\n\nn the above example, any HTTP request other than those for existing directories and existing files is treated as a request for your index.php file.\n\n\nNote!\n  These specific rules might not work for all server configurations.",
            "title": "URI Routing"
        },
        {
            "location": "/routing/#uri-routing",
            "text": "Application uses built-in CodeIgniter routing mechanism which allows to define or alter rules which regulate interaction with\nthe application from browser URI link.  Normal convention is:  http://example.com/[controller-class]/[controller-method]/[arguments]  CodeIgniter reads its routing rules from top to bottom and routes the request to the first matching rule. Each rule is a regular expression (left-side) mapped to a controller and method name separated by slashes (right-side). When a request comes in, CodeIgniter looks for the first match, and calls the appropriate controller and method, possibly with arguments.",
            "title": "URI Routing"
        },
        {
            "location": "/routing/#routing-rules-used",
            "text": "Following rules have been used in the application:  $route['default_controller'] = 'etl/home';  Default page shown, when nothing is provided is the page which is served by  home()  method of  Etl \ncontroller.  $route['(:any)']='etl/$1';  Any page-request after base-url should be directed to  Etl  controller and appropriate method is tried to be found.  $route['mongo/(:any)'] = 'etl/mongo/$1';  Any page request after base_url/mongo should be treated as accessing  mongo()  method of  Etl  controller with an argument specified as  $1  in page request.  $route['sql/(:any)'] = 'etl/sql/$1';  Any page request after base_url/sql should be treated as accessing  sql()  method of  Etl  controller with an argument specified as  $1  in page request.",
            "title": "Routing rules used"
        },
        {
            "location": "/routing/#clean-uri-generation",
            "text": "By default, the index.php file is included in URLs:  example.com/index.php/etl/mongo/extracted  If your Apache server has  mod_rewrite  enabled, you can easily remove this file by using a .htaccess file with some simple rules. \nHere is an example of such a file, using the \u201cnegative\u201d method in which everything is redirected except the specified items:  RewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php/$1 [L]  n the above example, any HTTP request other than those for existing directories and existing files is treated as a request for your index.php file.  Note!   These specific rules might not work for all server configurations.",
            "title": "Clean URI Generation"
        },
        {
            "location": "/controller/",
            "text": "Main ETL Controller\n\uf0c1\n\n\n\n\nMain controller handles data flow between views and models, it also perform data validation and build views from the templates.\n\n\nConstructor\n\uf0c1\n\n\n/**\n * Etl constructor.\n * Loads helpers, libraries\n */\nfunction __construct()\n{\n    parent::__construct();\n\n    //Load functions(helpers), classes(libraries), and models which we will use in controller\n    $this->load->helper(array('form', 'url','html','extract','transform'));\n    $this->load->library('form_validation');\n    $this->load->model(array('extract_model','transform_model','load_model','crud_model'));\n\n    //Set headers for application, turn off application-level caching\n    $this->output->set_header('Last-Modified: ' . gmdate(\"D, d M Y H:i:s\") . ' GMT');\n    ('Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0');\n    $this->output->set_header('Pragma: no-cache');\n    $this->output->set_header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\n}\n\n\n\nPage Loading Functions\n\uf0c1\n\n\nHome page.\n\n\n/**\n * Function which loads\n * Home ETL page http://base_url/home\n */\nfunction home()\n{\n    //Assign current page as home and toccurrent (we use it to mark second level in sidebar) as home\n    $data['current'] = 'home';\n    $data['toccurrent'] = 'home';\n\n    //Get amount of pages with items from allegro category and assign to pagesqty value\n    $data['pagesqty'] = $this->extract_model->getPagesQuantity();\n    //Get information from model which checkboxes are saved in database as default set of checkboxes\n    $data['choice'] = $this->transform_model->getChoice();\n    //Generate checkboxes and assign them to value. Here we use `transform_helper`\n    $data['checkboxes'] = generateCheckboxes();\n    //Get amount of rows in temp_products table from database and assign to `rowsqty` variable\n    $data['rowsqty'] = $this->load_model->getRowsQuantity();\n\n    //Create rules for configuration fields\n    $rules = [\n      [\n          'field' => 'amountOfPages',\n          'label' => 'Amount of pages',\n          'rules' => 'required|callback__quantity_check',\n          'errors' => [\n              'required' => 'Please, provide amount of pages to extract',\n          ]\n      ],\n      [\n          'field' => 'numrows',\n          'label' => 'Number of rows',\n          'rules' => 'required|callback__rows_check',\n          'errors' => [\n              'required' => 'Please, provide amount of rows to load',\n          ]\n      ],\n      [\n          'field' => 'fields[]',\n          'label' => 'Fields',\n          'rules' => 'required',\n          'errors' => [\n              'required' => 'Please, choose at least one attribute',\n          ]\n      ]\n    ];\n    //Set those rules\n    $this->form_validation->set_rules($rules);\n\n    //Run form validation\n    if ($this->form_validation->run($this) === FALSE) {\n        //If it didn't pass OR user loads the page 1st time without completing any forms show him home page with data\n\n        $this->load_page('pages/home',$data);\n    } else {\n        //If validation passed DO:\n\n        //Run main processes of each step of ETL process and assign result to respective variables\n        $data['content']= [\n            'extract'=> $this->extract_model->runExtractorAsync($this->input->post('amountOfPages')),\n            'transform' => $this->transform_model->runTransform($this->input->post('fields[]')),\n            'load' => $this->load_model->runLoad($this->input->post('numrows'), 'etl_module'),\n            'cleanup' => $this->crud_model->cleanUp($this->input->post('cleanups[]'))\n        ];\n        //Load page `home_result` with ETL process report\n        $this->load_page('pages/home_result',$data);\n    }\n}\n\n\n\nExtract page.\n\n\n/**\n * Function which loads\n * Extract page http://base_url/extract\n */\nfunction extract()\n{\n    //Get current phase\n    $phase = $this->crud_model->get_phase();\n    //Set current phase to value which we got earlier from controller on line 95\n    $data['phase'] = $phase;\n\n    //Assign current page as extract and toccurrent (we use it to mark second level in sidebar) as nothing\n    $data['current'] = 'extract';\n    $data['toccurrent'] = '';\n\n    //Check if we can access this page based on current phase of application\n    if( $this->crud_model->check_restrictions($data['current'], $phase) === FALSE){\n        //If FALSE -> load page which tells us that we are on a wrong phase to access this module\n        $this->load_page('errors/html/error_wrongphase',$data);\n    }else {\n        //If TRUE -> we are on correct page according to current phase do:\n\n        //Get amount of pages with items from allegro category and assign to pagesqty value\n        $data['pagesqty'] = $this->extract_model->getPagesQuantity();\n\n        //Set rules for form validation: field amountOfPages has to be required and value has to pass `quantity_check` function\n        $this->form_validation->set_rules('amountOfPages', 'Amount of pages', 'required|callback__quantity_check');\n        //Set custom error message if previous rule failed\n        $this->form_validation->set_message('required', 'Please, provide amount of pages to extract');\n\n\n        //Check if validation according to previous rules passed\n        if ($this->form_validation->run($this) === FALSE) {\n            //If it didn't pass OR user loads the page 1st time without any forms show him extract_app page with data\n            $this->load_page('pages/extract/extract_app', $data);\n        } else {\n            //If we filled in form correctly and validation has passed DO:\n\n            //Run method `runExtractorAsync` from model with parameter from `amountOfPages` and assign result returned by it to variable `content`\n            $data['content'] = $this->extract_model->runExtractorAsync($this->input->post('amountOfPages'));\n\n            //After successful extract set current application phase to transform\n            $this->crud_model->set_phase('transform');\n\n            //Load page extract_result with `content` which contains report from model what was done during extract\n            $this->load_page('pages/extract/extract_result', $data);\n        }\n\n    }\n\n}\n\n\n\nTransform page.\n\n\n/**\n * Function which loads\n * Transform page http://base_url/transform\n */\nfunction transform()\n{\n    //Get current phase\n    $phase = $this->crud_model->get_phase();\n    //Set current phase to value which we got earlier from controller on line 146\n    $data['phase'] = $phase;\n\n    //Assign current page as extract and toccurrent (we use it to mark second level in sidebar) as nothing\n    $data['current'] = 'transform';\n    $data['toccurrent'] = '';\n\n\n    //Check if we can access this page based on current phase of application\n    if( $this->crud_model->check_restrictions($data['current'], $phase) === FALSE){\n        //If FALSE -> load page which tells us that we are on a wrong phase to access this module\n        $this->load_page('errors/html/error_wrongphase',$data);\n    }else {\n        //If TRUE -> we are on correct page according to current phase do:\n\n        //Generate checkboxes and assign them to value. Here we use `transform_helper`\n        $data['checkboxes'] = generateCheckboxes();\n\n        //Set rules for form validation\n        //Checkbox array fields[] is required -> it means that ATLEAST one checkbox has to be checked\n        $this->form_validation->set_rules('fields[]', 'Fields', 'required');\n        //Set custom error message if previous rule failed\n        $this->form_validation->set_message('required', 'Please, choose at least one attribute');\n\n        //Check if validation according to previous rules passed\n        if ($this->form_validation->run() === FALSE) {\n            //If it didn't pass OR user loads the page 1st time without any forms show him transform_app page with data\n\n            //Get information from model which checkboxes are saved in database as default set of checkboxes\n            $data['choice'] = $this->transform_model->getChoice();\n            //Load transform_app page\n            $this->load_page('pages/transform/transform_app', $data);\n        } else {\n            //If we filled in form correctly and validation has passed DO:\n\n            //Send to model set of fields which we chose to transform and value of default_chb -> if we chose or not to save current set as default transform profile\n            $this->transform_model->setChoice($this->input->post('fields[]'), $this->input->post('default_chb'));\n\n            //Run main method of transform and pass to it set of checkboxes as a parameter which tells it which fields we want to aggregate and transform. And asign result of this function to content\n            $data['content'] = $this->transform_model->runTransform($this->input->post('fields[]'));\n\n            //After successful transform set current phase to load\n            $this->crud_model->set_phase('load');\n\n            //Load page transform_result\n            $this->load_page('pages/transform/transform_result', $data);\n        }\n    }\n\n}\n\n\n\nLoad page.\n\n\n/**\n * Function which loads\n * Load page http://base_url/load\n */\nfunction load()\n{\n    //Get current phase\n    $phase = $this->crud_model->get_phase();\n    //Set current phase to value which we got earlier from controller on line 203\n    $data['phase'] = $phase;\n\n    //Assign current page as extract and toccurrent (we use it to mark second level in sidebar) as nothing\n    $data['current'] = 'load';\n    $data['toccurrent'] = '';\n\n    //Check if we can access this page based on current phase of application\n    if( $this->crud_model->check_restrictions($data['current'], $phase) === FALSE){\n        //If FALSE -> load page which tells us that we are on a wrong phase to access this module\n        $this->load_page('errors/html/error_wrongphase',$data);\n    }else {\n        //If TRUE -> we are on correct page according to current phase do:\n\n        //Get amount of rows in temp_products table from database and assign to `rowsqty` variable\n        $data['rowsqty'] = $this->load_model->getRowsQuantity();\n\n        //Set rules for form validation\n        //Numrows field is required and has to pass `rows_check` function\n        $this->form_validation->set_rules('numrows', 'Number of rows', 'required|callback__rows_check', array('required' => 'Please, provide amount of rows to load'));\n        if ($this->form_validation->run($this) === FALSE) {\n            //If it didn't pass OR user loads the page 1st time without any forms show him load_app page with data\n\n            //Load load_app page\n            $this->load_page('pages/load/load_app', $data);\n        } else {\n            //If we filled in form correctly and validation has passed DO:\n\n            //Run main method of load and pass to it value provided in form via POST. And asign result of this function to content\n            $data['content'] = $this->load_model->runLoad($this->input->post('numrows'), 'load_module');\n\n            //After successful load set current phase to extract\n            $this->crud_model->set_phase('extract');\n\n            //Load page `load_result`\n            $this->load_page('pages/load/load_result', $data);\n        }\n    }\n\n}\n\n\n\nCRUD module home function.\n\n\n/**\n * Function which loads\n * Homepage of CRUD module. http://base_url/crudhome\n */\nfunction crudhome()\n{\n    //Assign current page as `crudhome` and toccurrent (we use it to mark second level in sidebar) as empty\n    $data['current'] = 'crudhome';\n    $data['toccurrent'] = '';\n    //Load page crudhome\n    $this->load_page('pages/crud/crudhome', $data);\n}\n\n\n\nMongo crud pages.\n\n\n/**\n * Function which loads mongo crud page http://base_url/mongo/XXXX\n * @param $collection - show CRUD table on this collection\n */\nfunction mongo($collection){\n    //If argument in adress bar ( base_url/mongo/XXXX ) is not a name of collection -> redirect to 404\n    if($collection !== 'products' && $collection !== 'aggregated'){\n        show_404();\n    }\n    //Assign current page as `crudhome` and toccurrent (we use it to mark second level in sidebar) as `mongo/XXXX` where XXXX is the name of collection\n    $data['current'] = 'crudhome';\n    $data['toccurrent'] = \"mongo/$collection\";\n\n    //Check for DELETE request from the page\n    if($this->input->post('delete') == 'X'){\n        //If such request came, do a cleanUp of current collection\n        $this->crud_model->cleanUp([$collection]);\n    }\n    //Set rules for form validation\n    //Filter field is required and has to pass `validate_filter` function\n    $this->form_validation->set_rules('filter', 'Filter', 'required|callback__validate_filter', array('required' => 'Please, provide filter'));\n    if ($this->form_validation->run($this) === FALSE) {\n        //If it didn't pass OR user loads the page 1st time without any forms, query collection with empty filter [] and assign result of query with empty filter to variable 'content'\n        $data['content'] = $this->crud_model->get_collection($collection, '[]');\n        //Load mongocrud page\n        $this->load_page('pages/crud/mongocrud', $data);\n    } else {\n        //If validation passed then perform query with filter which user provided and assign result of query with filter to variable 'content'\n        $data['content'] = $this->crud_model->get_collection($collection, $this->input->post('filter'));\n        //Load mongocrud page\n        $this->load_page('pages/crud/mongocrud', $data);\n    }\n\n}\n\n\n\nSQL crud pages.\n\n\n/**\n * Function which loads sql crud page http://base_url/sql/XXXX\n * @param $table - show CRUD table on this table\n */\nfunction sql($table){\n    //If argument in adress bar ( base_url/sql/XXXX ) is not a name of table -> redirect to 404\n    if($table !== 'products' && $table !== 'temp_products'){\n        show_404();\n    }\n    //Assign current page as `crudhome` and toccurrent (we use it to mark second level in sidebar) as `sql/XXXX` where XXXX is the name of table\n    $data['current'] = 'crudhome';\n    $data['toccurrent'] = \"sql/$table\";\n\n    //Check for DELETE request from the page\n    if($this->input->post('delete') == 'X'){\n        //If such request came, do a cleanUp of current table\n        if($table =='products'){\n            //If table is `products` perform a cleanup with 'sql_products' tag so it will not collide with mongo collection with the same name.\n            $this->crud_model->cleanUp(['sql_products']);\n        }else{\n            $this->crud_model->cleanUp([$table]);\n        }\n    }\n    //Check for GETCSV request from the page\n    if($this->input->post('getcsv') == 'Get CSV'){\n        //Make user download csv with data from last query\n        $this->crud_model->get_csv($this->input->post('last_query'));\n    }\n\n    //Set rules for form validation\n    //Query field is required\n    $this->form_validation->set_rules('query', 'Query', 'required', array('required' => 'Please, provide query'));\n    if ($this->form_validation->run($this) === FALSE) {\n        //If it didn't pass OR user loads the page 1st time without any forms, query database with `select *` and assign result of query with full response to variable 'content'\n\n        $data['content'] = $this->crud_model->getResult('select * from '.$table, $table);\n        //Load sqlcrud page\n        $this->load_page('pages/crud/sqlcrud', $data);\n    } else {\n        //If validation passed then perform query with query which user provided and assign result of last query to variable 'content'\n        $data['content'] = $this->crud_model->getResult($this->input->post('query'), $table);\n        //Load sqlcrud page\n        $this->load_page('pages/crud/sqlcrud', $data);\n    }\n\n}\n\n\n\nValidation Function\n\uf0c1\n\n\nAmount of pages provided during Extract validation function.\n\n\n/**\n * Validation function, checks if amount of pages is not less then minimal and not bigger than maximum allowed\n * @param $input - amount of pages provided by user\n * @return bool - validation passed or not\n */\nfunction _quantity_check($input)\n{\n    //Get maximum pages quantity for current category from model\n    $max = $this->extract_model->getPagesQuantity();\n    if ($input > $max) {\n        //If input quantity of pages is higher than max - quantity check fails, return false\n        $this->form_validation->set_message('_quantity_check', '{field} can not be bigger than <b>' . $max . '</b>');\n        return FALSE;\n    } elseif ($input < 1) {\n        //If input quantity of pages is lower than 1 - quantity check fails, return false\n        $this->form_validation->set_message('_quantity_check', '{field} can not be smaller than <b>1</b>');\n        return FALSE;\n    } else {\n        //If it is more than 1 and less then maximum amount - quantity check succeeds, return true\n        return TRUE;\n    }\n}\n\n\n\nAmount of rows provided during Load validation function.\n\n\n/**\n * Validation function, checks if amount of rows is not less then minimal and not bigger than maximum allowed\n * @param $input - amount of rows provided by user\n * @return bool - validation passed or not\n */\nfunction _rows_check($input)\n{\n    //Get maximum rows quantity from table in database\n    $max = $this->load_model->getRowsQuantity();\n    if ($input > $max) {\n        //If input quantity of rows is higher than max - quantity check fails, return false\n        $this->form_validation->set_message('_rows_check', '{field} can not be bigger than <b>' . $max . '</b>');\n        return FALSE;\n    } elseif ($input < 0) {\n        //If input quantity of rows is lower than 0 - quantity check fails, return false\n        $this->form_validation->set_message('_rows_check', '{field} can not be smaller than <b>0</b>');\n        return FALSE;\n    } else {\n        //If it is more or equal 0 and less then maximum amount - quantity check succeeds, return true\n        return TRUE;\n    }\n}\n\n\n\nMongo filter validation function.\n\n\n/**\n * Validation function, checks if filter provided by user is a correct filter for mongo db\n * @param $input - filter string\n * @return bool - validation passed or not\n */\nfunction _validate_filter($input){\n    //Try to decode input string to json object\n    $json = json_decode($input, true);\n    if(json_last_error() == JSON_ERROR_NONE){\n        //If there were no errors during json encoding - validation passed, return true\n        return true;\n    }\n    //If there were any json errors, it means input string is not a valid json\n    //Set error message - validation failed, return false\n    $this->form_validation->set_message('_validate_filter', '{field} is not a valid JSON string. Check syntax in '.$input);\n    return false;\n\n\n}\n\n\n\nAssisting Functions\n\uf0c1\n\n\n/**\n * Function which builds page from templates\n * @param $page - view to build\n * @param $data - data to send to view\n */\nprivate function load_page($page, $data)\n{\n    //Load page from templates\n    $this->load->view('templates/meta');\n    $this->load->view('templates/sidebar', $data);\n    $this->load->view('templates/topbar', $data);\n    $this->load->view($page, $data);\n    $this->load->view('templates/footer');\n    $this->load->view('templates/script', $data);\n}",
            "title": "Controllers"
        },
        {
            "location": "/controller/#main-etl-controller",
            "text": "Main controller handles data flow between views and models, it also perform data validation and build views from the templates.",
            "title": "Main ETL Controller"
        },
        {
            "location": "/controller/#constructor",
            "text": "/**\n * Etl constructor.\n * Loads helpers, libraries\n */\nfunction __construct()\n{\n    parent::__construct();\n\n    //Load functions(helpers), classes(libraries), and models which we will use in controller\n    $this->load->helper(array('form', 'url','html','extract','transform'));\n    $this->load->library('form_validation');\n    $this->load->model(array('extract_model','transform_model','load_model','crud_model'));\n\n    //Set headers for application, turn off application-level caching\n    $this->output->set_header('Last-Modified: ' . gmdate(\"D, d M Y H:i:s\") . ' GMT');\n    ('Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0');\n    $this->output->set_header('Pragma: no-cache');\n    $this->output->set_header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\n}",
            "title": "Constructor"
        },
        {
            "location": "/controller/#page-loading-functions",
            "text": "Home page.  /**\n * Function which loads\n * Home ETL page http://base_url/home\n */\nfunction home()\n{\n    //Assign current page as home and toccurrent (we use it to mark second level in sidebar) as home\n    $data['current'] = 'home';\n    $data['toccurrent'] = 'home';\n\n    //Get amount of pages with items from allegro category and assign to pagesqty value\n    $data['pagesqty'] = $this->extract_model->getPagesQuantity();\n    //Get information from model which checkboxes are saved in database as default set of checkboxes\n    $data['choice'] = $this->transform_model->getChoice();\n    //Generate checkboxes and assign them to value. Here we use `transform_helper`\n    $data['checkboxes'] = generateCheckboxes();\n    //Get amount of rows in temp_products table from database and assign to `rowsqty` variable\n    $data['rowsqty'] = $this->load_model->getRowsQuantity();\n\n    //Create rules for configuration fields\n    $rules = [\n      [\n          'field' => 'amountOfPages',\n          'label' => 'Amount of pages',\n          'rules' => 'required|callback__quantity_check',\n          'errors' => [\n              'required' => 'Please, provide amount of pages to extract',\n          ]\n      ],\n      [\n          'field' => 'numrows',\n          'label' => 'Number of rows',\n          'rules' => 'required|callback__rows_check',\n          'errors' => [\n              'required' => 'Please, provide amount of rows to load',\n          ]\n      ],\n      [\n          'field' => 'fields[]',\n          'label' => 'Fields',\n          'rules' => 'required',\n          'errors' => [\n              'required' => 'Please, choose at least one attribute',\n          ]\n      ]\n    ];\n    //Set those rules\n    $this->form_validation->set_rules($rules);\n\n    //Run form validation\n    if ($this->form_validation->run($this) === FALSE) {\n        //If it didn't pass OR user loads the page 1st time without completing any forms show him home page with data\n\n        $this->load_page('pages/home',$data);\n    } else {\n        //If validation passed DO:\n\n        //Run main processes of each step of ETL process and assign result to respective variables\n        $data['content']= [\n            'extract'=> $this->extract_model->runExtractorAsync($this->input->post('amountOfPages')),\n            'transform' => $this->transform_model->runTransform($this->input->post('fields[]')),\n            'load' => $this->load_model->runLoad($this->input->post('numrows'), 'etl_module'),\n            'cleanup' => $this->crud_model->cleanUp($this->input->post('cleanups[]'))\n        ];\n        //Load page `home_result` with ETL process report\n        $this->load_page('pages/home_result',$data);\n    }\n}  Extract page.  /**\n * Function which loads\n * Extract page http://base_url/extract\n */\nfunction extract()\n{\n    //Get current phase\n    $phase = $this->crud_model->get_phase();\n    //Set current phase to value which we got earlier from controller on line 95\n    $data['phase'] = $phase;\n\n    //Assign current page as extract and toccurrent (we use it to mark second level in sidebar) as nothing\n    $data['current'] = 'extract';\n    $data['toccurrent'] = '';\n\n    //Check if we can access this page based on current phase of application\n    if( $this->crud_model->check_restrictions($data['current'], $phase) === FALSE){\n        //If FALSE -> load page which tells us that we are on a wrong phase to access this module\n        $this->load_page('errors/html/error_wrongphase',$data);\n    }else {\n        //If TRUE -> we are on correct page according to current phase do:\n\n        //Get amount of pages with items from allegro category and assign to pagesqty value\n        $data['pagesqty'] = $this->extract_model->getPagesQuantity();\n\n        //Set rules for form validation: field amountOfPages has to be required and value has to pass `quantity_check` function\n        $this->form_validation->set_rules('amountOfPages', 'Amount of pages', 'required|callback__quantity_check');\n        //Set custom error message if previous rule failed\n        $this->form_validation->set_message('required', 'Please, provide amount of pages to extract');\n\n\n        //Check if validation according to previous rules passed\n        if ($this->form_validation->run($this) === FALSE) {\n            //If it didn't pass OR user loads the page 1st time without any forms show him extract_app page with data\n            $this->load_page('pages/extract/extract_app', $data);\n        } else {\n            //If we filled in form correctly and validation has passed DO:\n\n            //Run method `runExtractorAsync` from model with parameter from `amountOfPages` and assign result returned by it to variable `content`\n            $data['content'] = $this->extract_model->runExtractorAsync($this->input->post('amountOfPages'));\n\n            //After successful extract set current application phase to transform\n            $this->crud_model->set_phase('transform');\n\n            //Load page extract_result with `content` which contains report from model what was done during extract\n            $this->load_page('pages/extract/extract_result', $data);\n        }\n\n    }\n\n}  Transform page.  /**\n * Function which loads\n * Transform page http://base_url/transform\n */\nfunction transform()\n{\n    //Get current phase\n    $phase = $this->crud_model->get_phase();\n    //Set current phase to value which we got earlier from controller on line 146\n    $data['phase'] = $phase;\n\n    //Assign current page as extract and toccurrent (we use it to mark second level in sidebar) as nothing\n    $data['current'] = 'transform';\n    $data['toccurrent'] = '';\n\n\n    //Check if we can access this page based on current phase of application\n    if( $this->crud_model->check_restrictions($data['current'], $phase) === FALSE){\n        //If FALSE -> load page which tells us that we are on a wrong phase to access this module\n        $this->load_page('errors/html/error_wrongphase',$data);\n    }else {\n        //If TRUE -> we are on correct page according to current phase do:\n\n        //Generate checkboxes and assign them to value. Here we use `transform_helper`\n        $data['checkboxes'] = generateCheckboxes();\n\n        //Set rules for form validation\n        //Checkbox array fields[] is required -> it means that ATLEAST one checkbox has to be checked\n        $this->form_validation->set_rules('fields[]', 'Fields', 'required');\n        //Set custom error message if previous rule failed\n        $this->form_validation->set_message('required', 'Please, choose at least one attribute');\n\n        //Check if validation according to previous rules passed\n        if ($this->form_validation->run() === FALSE) {\n            //If it didn't pass OR user loads the page 1st time without any forms show him transform_app page with data\n\n            //Get information from model which checkboxes are saved in database as default set of checkboxes\n            $data['choice'] = $this->transform_model->getChoice();\n            //Load transform_app page\n            $this->load_page('pages/transform/transform_app', $data);\n        } else {\n            //If we filled in form correctly and validation has passed DO:\n\n            //Send to model set of fields which we chose to transform and value of default_chb -> if we chose or not to save current set as default transform profile\n            $this->transform_model->setChoice($this->input->post('fields[]'), $this->input->post('default_chb'));\n\n            //Run main method of transform and pass to it set of checkboxes as a parameter which tells it which fields we want to aggregate and transform. And asign result of this function to content\n            $data['content'] = $this->transform_model->runTransform($this->input->post('fields[]'));\n\n            //After successful transform set current phase to load\n            $this->crud_model->set_phase('load');\n\n            //Load page transform_result\n            $this->load_page('pages/transform/transform_result', $data);\n        }\n    }\n\n}  Load page.  /**\n * Function which loads\n * Load page http://base_url/load\n */\nfunction load()\n{\n    //Get current phase\n    $phase = $this->crud_model->get_phase();\n    //Set current phase to value which we got earlier from controller on line 203\n    $data['phase'] = $phase;\n\n    //Assign current page as extract and toccurrent (we use it to mark second level in sidebar) as nothing\n    $data['current'] = 'load';\n    $data['toccurrent'] = '';\n\n    //Check if we can access this page based on current phase of application\n    if( $this->crud_model->check_restrictions($data['current'], $phase) === FALSE){\n        //If FALSE -> load page which tells us that we are on a wrong phase to access this module\n        $this->load_page('errors/html/error_wrongphase',$data);\n    }else {\n        //If TRUE -> we are on correct page according to current phase do:\n\n        //Get amount of rows in temp_products table from database and assign to `rowsqty` variable\n        $data['rowsqty'] = $this->load_model->getRowsQuantity();\n\n        //Set rules for form validation\n        //Numrows field is required and has to pass `rows_check` function\n        $this->form_validation->set_rules('numrows', 'Number of rows', 'required|callback__rows_check', array('required' => 'Please, provide amount of rows to load'));\n        if ($this->form_validation->run($this) === FALSE) {\n            //If it didn't pass OR user loads the page 1st time without any forms show him load_app page with data\n\n            //Load load_app page\n            $this->load_page('pages/load/load_app', $data);\n        } else {\n            //If we filled in form correctly and validation has passed DO:\n\n            //Run main method of load and pass to it value provided in form via POST. And asign result of this function to content\n            $data['content'] = $this->load_model->runLoad($this->input->post('numrows'), 'load_module');\n\n            //After successful load set current phase to extract\n            $this->crud_model->set_phase('extract');\n\n            //Load page `load_result`\n            $this->load_page('pages/load/load_result', $data);\n        }\n    }\n\n}  CRUD module home function.  /**\n * Function which loads\n * Homepage of CRUD module. http://base_url/crudhome\n */\nfunction crudhome()\n{\n    //Assign current page as `crudhome` and toccurrent (we use it to mark second level in sidebar) as empty\n    $data['current'] = 'crudhome';\n    $data['toccurrent'] = '';\n    //Load page crudhome\n    $this->load_page('pages/crud/crudhome', $data);\n}  Mongo crud pages.  /**\n * Function which loads mongo crud page http://base_url/mongo/XXXX\n * @param $collection - show CRUD table on this collection\n */\nfunction mongo($collection){\n    //If argument in adress bar ( base_url/mongo/XXXX ) is not a name of collection -> redirect to 404\n    if($collection !== 'products' && $collection !== 'aggregated'){\n        show_404();\n    }\n    //Assign current page as `crudhome` and toccurrent (we use it to mark second level in sidebar) as `mongo/XXXX` where XXXX is the name of collection\n    $data['current'] = 'crudhome';\n    $data['toccurrent'] = \"mongo/$collection\";\n\n    //Check for DELETE request from the page\n    if($this->input->post('delete') == 'X'){\n        //If such request came, do a cleanUp of current collection\n        $this->crud_model->cleanUp([$collection]);\n    }\n    //Set rules for form validation\n    //Filter field is required and has to pass `validate_filter` function\n    $this->form_validation->set_rules('filter', 'Filter', 'required|callback__validate_filter', array('required' => 'Please, provide filter'));\n    if ($this->form_validation->run($this) === FALSE) {\n        //If it didn't pass OR user loads the page 1st time without any forms, query collection with empty filter [] and assign result of query with empty filter to variable 'content'\n        $data['content'] = $this->crud_model->get_collection($collection, '[]');\n        //Load mongocrud page\n        $this->load_page('pages/crud/mongocrud', $data);\n    } else {\n        //If validation passed then perform query with filter which user provided and assign result of query with filter to variable 'content'\n        $data['content'] = $this->crud_model->get_collection($collection, $this->input->post('filter'));\n        //Load mongocrud page\n        $this->load_page('pages/crud/mongocrud', $data);\n    }\n\n}  SQL crud pages.  /**\n * Function which loads sql crud page http://base_url/sql/XXXX\n * @param $table - show CRUD table on this table\n */\nfunction sql($table){\n    //If argument in adress bar ( base_url/sql/XXXX ) is not a name of table -> redirect to 404\n    if($table !== 'products' && $table !== 'temp_products'){\n        show_404();\n    }\n    //Assign current page as `crudhome` and toccurrent (we use it to mark second level in sidebar) as `sql/XXXX` where XXXX is the name of table\n    $data['current'] = 'crudhome';\n    $data['toccurrent'] = \"sql/$table\";\n\n    //Check for DELETE request from the page\n    if($this->input->post('delete') == 'X'){\n        //If such request came, do a cleanUp of current table\n        if($table =='products'){\n            //If table is `products` perform a cleanup with 'sql_products' tag so it will not collide with mongo collection with the same name.\n            $this->crud_model->cleanUp(['sql_products']);\n        }else{\n            $this->crud_model->cleanUp([$table]);\n        }\n    }\n    //Check for GETCSV request from the page\n    if($this->input->post('getcsv') == 'Get CSV'){\n        //Make user download csv with data from last query\n        $this->crud_model->get_csv($this->input->post('last_query'));\n    }\n\n    //Set rules for form validation\n    //Query field is required\n    $this->form_validation->set_rules('query', 'Query', 'required', array('required' => 'Please, provide query'));\n    if ($this->form_validation->run($this) === FALSE) {\n        //If it didn't pass OR user loads the page 1st time without any forms, query database with `select *` and assign result of query with full response to variable 'content'\n\n        $data['content'] = $this->crud_model->getResult('select * from '.$table, $table);\n        //Load sqlcrud page\n        $this->load_page('pages/crud/sqlcrud', $data);\n    } else {\n        //If validation passed then perform query with query which user provided and assign result of last query to variable 'content'\n        $data['content'] = $this->crud_model->getResult($this->input->post('query'), $table);\n        //Load sqlcrud page\n        $this->load_page('pages/crud/sqlcrud', $data);\n    }\n\n}",
            "title": "Page Loading Functions"
        },
        {
            "location": "/controller/#validation-function",
            "text": "Amount of pages provided during Extract validation function.  /**\n * Validation function, checks if amount of pages is not less then minimal and not bigger than maximum allowed\n * @param $input - amount of pages provided by user\n * @return bool - validation passed or not\n */\nfunction _quantity_check($input)\n{\n    //Get maximum pages quantity for current category from model\n    $max = $this->extract_model->getPagesQuantity();\n    if ($input > $max) {\n        //If input quantity of pages is higher than max - quantity check fails, return false\n        $this->form_validation->set_message('_quantity_check', '{field} can not be bigger than <b>' . $max . '</b>');\n        return FALSE;\n    } elseif ($input < 1) {\n        //If input quantity of pages is lower than 1 - quantity check fails, return false\n        $this->form_validation->set_message('_quantity_check', '{field} can not be smaller than <b>1</b>');\n        return FALSE;\n    } else {\n        //If it is more than 1 and less then maximum amount - quantity check succeeds, return true\n        return TRUE;\n    }\n}  Amount of rows provided during Load validation function.  /**\n * Validation function, checks if amount of rows is not less then minimal and not bigger than maximum allowed\n * @param $input - amount of rows provided by user\n * @return bool - validation passed or not\n */\nfunction _rows_check($input)\n{\n    //Get maximum rows quantity from table in database\n    $max = $this->load_model->getRowsQuantity();\n    if ($input > $max) {\n        //If input quantity of rows is higher than max - quantity check fails, return false\n        $this->form_validation->set_message('_rows_check', '{field} can not be bigger than <b>' . $max . '</b>');\n        return FALSE;\n    } elseif ($input < 0) {\n        //If input quantity of rows is lower than 0 - quantity check fails, return false\n        $this->form_validation->set_message('_rows_check', '{field} can not be smaller than <b>0</b>');\n        return FALSE;\n    } else {\n        //If it is more or equal 0 and less then maximum amount - quantity check succeeds, return true\n        return TRUE;\n    }\n}  Mongo filter validation function.  /**\n * Validation function, checks if filter provided by user is a correct filter for mongo db\n * @param $input - filter string\n * @return bool - validation passed or not\n */\nfunction _validate_filter($input){\n    //Try to decode input string to json object\n    $json = json_decode($input, true);\n    if(json_last_error() == JSON_ERROR_NONE){\n        //If there were no errors during json encoding - validation passed, return true\n        return true;\n    }\n    //If there were any json errors, it means input string is not a valid json\n    //Set error message - validation failed, return false\n    $this->form_validation->set_message('_validate_filter', '{field} is not a valid JSON string. Check syntax in '.$input);\n    return false;\n\n\n}",
            "title": "Validation Function"
        },
        {
            "location": "/controller/#assisting-functions",
            "text": "/**\n * Function which builds page from templates\n * @param $page - view to build\n * @param $data - data to send to view\n */\nprivate function load_page($page, $data)\n{\n    //Load page from templates\n    $this->load->view('templates/meta');\n    $this->load->view('templates/sidebar', $data);\n    $this->load->view('templates/topbar', $data);\n    $this->load->view($page, $data);\n    $this->load->view('templates/footer');\n    $this->load->view('templates/script', $data);\n}",
            "title": "Assisting Functions"
        },
        {
            "location": "/models/",
            "text": "Application Models\n\uf0c1\n\n\nApplication makes use of 4 models, each one handles business logic of respective module of the program.\n\n\n\n\n\n\n\n\nExtract_model\n - handles the Extract process as well as manages the connection with MongoDB temporal collections.\n\n\n\n\n\n\nTransform_model\n - handles the Transform process as well as manages the connection with MongoDB and MySQL temporal databases.\n\n\n\n\n\n\nLoad_model\n - handles the Load process as well as manages the connection with target Data Warehouse.\n\n\n\n\n\n\nCrud_model\n - handles all logic which is responsible for interaction with both MongoDB and MySQL databases. Is used in all other models and a controller.\n\n\n\n\n\n\nExtract Model\n\uf0c1\n\n\n\n\nThis model handles all the logic behind Extract process. \nIt connects to remote web-page, scraps data and inserts it into temporal MongoDB collection named \nextracted\n.\n\n\nFields\n\uf0c1\n\n\n/**\n * Variable which contains global application settings\n * @var\n */\nprivate $settings;\n\n\n\nConstructor\n\uf0c1\n\n\n/**\n * Extract_model constructor.\n * Loads helpers, other models, libraries and settings\n */\nfunction __construct()\n{\n    //Load crud model so we can read settings from database\n    $this->load->model('crud_model');\n    //Load settings from database via crud_model\n    $this->settings = $this->crud_model->get_settings();\n\n    //Load helpers with usefull functions\n    $this->load->helper('url'); //built-in\n    $this->load->helper('extract'); //custom\n}\n\n\n\nMain Function\n\uf0c1\n\n\n/**\n * Main function of Extract process which uses all other functions\n * @param int $amountOfPages - amount of pages to extract from allegro category\n * @return mixed - returns report with data about extract process\n */\npublic function runExtractorAsync($amountOfPages = 1)\n{\n    //Load timer library\n    $this->load->library('timer');\n    //Start timer\n    $this->timer->start();\n    //Set php timeout to 0 so it will not timeout during lengthy scraping process\n    set_time_limit(0);\n    //Extract links from allegro category pages\n    $links = $this->extractLinks($amountOfPages);\n    //Create multi-threading loop\n    $loop = React\\EventLoop\\Factory::create();\n    //Create virtual browser which will process pages\n    $client = new Browser($loop);\n    //Load scraper class which will scrape data from products\n    $this->load->library('scraper');\n    //Set browser client for scraper\n    $this->scraper->setClient($client);\n    //Set data on which scraper will operate. Links is an array of product links from allegro category, 10 is an amount of simultaneous request\n    $this->scraper->scrape($links, 10);\n    //Start multi-threading loop\n    $loop->run();\n    //After loop finished looping, retrieve data from scraper\n    $products = $this->scraper->getData();\n    //Insert data to database\n    $query = $this->loadToDatabase($products);\n    //Pack data to be sent as a report of a process\n    $result = [\n        'amount' => [\n            'parsed' => count($links),\n            'affected' => $query['inserted'],\n            'notaffected' => $query['matched'],\n            ],\n        'executiontime' =>  $this->timer->stop()\n    ];\n\n    return $result;\n}\n\n\n\nOther Functions\n\uf0c1\n\n\nFunction which returns amount of pages in category.\n\n\n/**\n * Function which is used to get pages quantity from category\n * @return mixed - amount of pages\n */\npublic function getPagesQuantity()\n{\n    //Get category from settings\n    $category[] = $this->settings['category'];\n    //Load category crawler\n    $this->load->library('categorycrawler', $category);\n    //Send crawler to get amount of pages from current working category\n    $amountOfPages = $this->categorycrawler->getAmountOfPages();\n    return $amountOfPages;\n}\n\n\n\nFunction which extracts links.\n\n\n/**\n * Function which extracts links to products from current category\n * @param $amountOfPages - from how many pages we want to extract links\n * @return array - array with product links\n */\npublic function extractLinks($amountOfPages)\n{\n    //Set from how many pages from category we wont to extract links\n    $count = $amountOfPages;\n    $i = 1;\n    //Empty container which will be populated with links\n    $links = array();\n    //Extract links from category pages in a loop while i is smaller that requested amount of pages\n    while ($i <= $count) {\n        //Create link to new category page which looks like https://allegro.pl/category?p=i where ?p=i part shows page from which we will extract links\n        $category_page[0] = $this->settings['category'].'?p='.$i;\n        //Create category crawler and send it to collect links from this page\n        $crawlers = new categorycrawler($category_page);\n        //Populate $links array with links which category crawler brought to us\n        $links[] = $crawlers->getProductLinksFromPage();\n        //Increase value of i\n        $i++;\n    }\n    //Aggregate links to one-dimesional array for further ease of processing\n    $links = toSingleArray($links);\n    return $links;\n\n}\n\n\n\nFunction which loads data objects to database.\n\n\n/**\n * Function which loads extracted data to mongo database\n * @param array $array - array of extracted data\n * @return array - report of load process\n */\npublic function loadToDatabase(array $array)\n{\n    //Create a bulk object\n    $bulk = new \\MongoDB\\Driver\\BulkWrite(['ordered' => false]);\n    //Populate bulk object with records to be inserted in database\n    foreach ($array as $item) {\n        $bulk->update(\n            ['_id' => $item['notifyAndWatch']['offerId']],\n            array('$setOnInsert' => $item),\n            array('upsert' => true)\n        );\n    }\n    //Create manager which will perform bulk write to a certain mongodb database. Provide credentials to database as parameter\n    $manager = new \\MongoDB\\Driver\\Manager('mongodb+srv://root:root@kreslav-hcr9i.mongodb.net');\n    //Create error handler, if something stucks it will throw an appropriate error\n    $writeConcern = new \\MongoDB\\Driver\\WriteConcern(\\MongoDB\\Driver\\WriteConcern::MAJORITY, 100);\n    //Let manager execute bulk insert\n    $insert_result = $manager->executeBulkWrite('extracthub.products', $bulk, $writeConcern);\n    //Pack data and report how many records has been inserted and how many were already present in database\n    return [\n        'inserted' => $insert_result->getUpsertedCount(),\n        'matched' => $insert_result->getMatchedCount()\n    ];\n}\n\n\n\nTransform Model\n\uf0c1\n\n\n\n\nThis model handles all the logic behind Transform process. \nIt collects data from \nextracted\n temporal collection, aggregates and pushes it to another temporal collection\n\naggregated\n and then converts data types and migrates data to \ntemp_products\n MySQL table.\n\n\nFields\n\uf0c1\n\n\n/**\n * Variable which holds object responsible for connection with MongoDB\n * @var \\MongoDB\\Client\n */\nprivate $mongoClient;\n\n\n\nConstructor\n\uf0c1\n\n\n/**\n * Transform_model constructor.\n * Here we connect to databases and load helpers\n */\nfunction __construct()\n{\n    //connect to MongoDB\n    $this->mongoClient= new \\MongoDB\\Client('mongodb+srv://root:root@kreslav-hcr9i.mongodb.net/test?retryWrites=true');\n    //connect to mysql, connection parameters are in application/config/database.php\n    $this->load->database('mysql');\n    //Load helpers\n    $this->load->helper('url');\n    $this->load->helper('transform');\n}\n\n\n\nMain Function\n\uf0c1\n\n\n/**\n * Main function of Transform process which uses other functions\n * @param $input - set of checkboxes which show what data do we want to transform\n * @return mixed - report with data about transform process\n */\npublic function runTransform($input){\n    //Set php time limit to 0 so it wont timeout during long process of quering database\n    set_time_limit(0);\n    //Load timer library\n    $this->load->library('timer');\n    //Start time\n    $this->timer->start();\n    //Aggregate data from mongoDB and write aggregation report to $result['mongodb']\n    $result['mongodb'] = $this->aggregateData($input);\n    //Transform data from aggregated mongodb collection to temp_products sql table and write report to variable $result['mysql']\n    $result['mysql'] = $this->transformToSql();\n    //stop timer and write execution time to $result['executiontime'] variable\n    $result['executiontime']=$this->timer->stop();\n    return $result;\n}\n\n\n\nOther Functions\n\uf0c1\n\n\nSetter which is used to save transform settings to database.\n\n\n/**\n * Function which is used to save information which checkboxes from transform page has to remain checked when we reload page\n * @param $input - array of checkboxes\n * @param $consent - do we want to set array of checkboxes as default or no\n */\npublic function setChoice($input, $consent){\n    //check if we really want to sent it as default\n    if($consent != 'default'){\n        //if not do nothing and exit function\n        return;\n    }\n    //clear previous default set of checkboxes which are stored in database\n    $this->db->query('DELETE from choice');\n    //Start sql transaction. This query is used before loops to speed up sql inserts\n    $transactionsql = 'START TRANSACTION';\n    $this->db->query($transactionsql);\n    //Insert information with names of checkboxes which we want to remain checked at later loads\n    foreach ($input as $checkbox){\n        $sql = 'insert into choice (checkbox) value (\"'.$checkbox.'\");';\n        $this->db->query($sql);\n    }\n    //Commit transaction. This query is used after loop inserts to summarise transaction and speed it up\n    $commitsql = 'commit';\n    $this->db->query($commitsql);\n}\n\n\n\nGetter which is used to retrieve transform settings.\n\n\n/**\n * Function which is used to retrieve information from database about which checkboxes should be checked on page load.\n * It loads default set of checkboxes\n * @return array - array of checkboxes which have to be checked\n */\npublic function getChoice(){\n    //Select everything from choice table\n    $sql = 'select * from choice';\n    $query = $this->db->query($sql);\n    $result = [];\n    //Write names of checkboxes to result array and return int\n    foreach ($query->result() as $row){\n        $result[] = $row->checkbox;\n    }\n    return $result;\n}\n\n\n\nFunction which aggregates data via Mongo aggregation pipeline.\n\n\n/**\n * Function which extracts only useful data from big mongoDB object and aggregates it to simple key=>value pair\n * @param array $arrayOfValues - set of checkboxes which show what data do we want to aggregate\n * @return Traversable - object which contains report about aggregation process\n */\npublic function aggregateData(array $arrayOfValues){\n    //Assign mongodb collection 'products' to a variable\n    $extracted = $this->mongoClient->extracthub->products;\n    //Generate aggregation options based on array of chosen values\n    $options = $this->generateAggregateOptions($arrayOfValues);\n    //Assign mongodb collection 'aggregated' to a variable\n    $aggregated = $this->mongoClient->extracthub->aggregated;\n    //Clear 'aggregated' collection from any previous data\n    $aggregated->deleteMany([]);\n    //Use aggregation pipeline framework with aggregation options on collection with big objects\n    $result = $extracted->aggregate($options);\n    return $result;\n}\n\n\n\nFunction which generates options for aggregation pipeline.\n\n\n/**\n * Function that sets and generates aggregation options\n * @param array $arrayOfValues - set of checkboxes which show what data do we want to aggregate\n * @return array - array of options to pass to aggregation pipeline\n */\npublic function generateAggregateOptions(array $arrayOfValues){\n    //Set what attributes do we want to project during aggregation\n    //project id always\n    $project = [\"id\"=>1];\n    //Foreach attribute project it as its final name and reduce nesting to single level\n    foreach ($arrayOfValues as $attribute){\n        //Determine how deeply is attribute nested by exploding it by dot\n        $explodedAttribute = explode('.', $attribute);\n        //Amount of product elements = depth of nesting\n        $amount = count($explodedAttribute);\n        //If attribute is nested reduce nesting (e.g. price.installments.installmentsQuantity becomes just installmentsQuantity)\n        if($amount>2){\n            $project[$explodedAttribute[$amount-2].''.$explodedAttribute[$amount-1]] = '$'.$attribute;\n        }else{\n            $project[$explodedAttribute[1]] = '$'.$attribute;\n        }\n\n    }\n    //Create aggregation pipeline\n    $ops = array(\n        array(\n            '$project' => $project //array of options which configure how to project attributes\n        ),\n        array(\n            '$out' => \"aggregated\" //output of aggregation write directly to `aggregated` collection\n        )\n    );\n    //Return aggregation pipeline\n    return $ops;\n}\n\n\n\nMongoDB to MySQL migrator.\n\n\n/**\n * Function that migrates data from mongoDB to sql table\n * @return mixed - report on migration process\n */\npublic function transformToSql(){\n    //Refresh connection to sql database\n    $this->db->reconnect();\n    //Assign mongoDB collection to variable\n    $mongodb = $this->mongoClient->extracthub->aggregated;\n    //Find everything in this collection and assign to cursor object\n    $cursor = $mongodb->find();\n    //Container which will host failed inserts\n    $failed =[];\n    //Start sql transaction. This query is used before loops to speed up sql inserts\n    $transactionsql = 'START TRANSACTION';\n    $this->db->query($transactionsql);\n\n    //Loop through all products in MongoDB cursor\n    foreach ($cursor as $product){\n        //If cursor doesn't have this value assign string \"NULL\" to it\n        //During assignment convert boolean values to respective strings using helper methods\n        $id= isset($product['_id']) ? $product['_id'] : 'NULL';\n        $title= isset($product['title']) ? $product['title'] : 'NULL';\n        $priceInteger= isset($product['priceInteger']) ? $product['priceInteger'] : 'NULL';\n        $sellerName= isset($product['sellerName']) ? $product['sellerName'] : 'NULL';\n        $sellerListingUrl= isset($product['sellerListingUrl']) ? $product['sellerListingUrl'] : 'NULL';\n        $quantityWithLabel= isset($product['quantityWithLabel']) ? $product['quantityWithLabel'] : 'NULL';\n        $quantity= isset($product['quantity']) ? $product['quantity'] : 'NULL';\n        $description= isset($product['description']) ? $product['description'] : 'NULL';\n        $superSellerActive= isset($product['superSellerActive']) ? $product['superSellerActive'] : 'NULL';\n        $itemCondition= isset($product['itemCondition']) ? $product['itemCondition'] : 'NULL';\n        $endingDate= isset($product['endingDate']) ? $product['endingDate'] : 'NULL';\n        $endingDate = getAttributeOrNull($endingDate);\n        $nextPrice= isset($product['nextPrice']) ? $product['nextPrice'] : 'NULL';\n        $label= isset($product['label']) ? $product['label'] : 'NULL';\n        $installmentsquantity= isset($product['installmentsquantity']) ? $product['installmentsquantity'] : 'NULL';\n        $installmentsfree= isset($product['installmentsfree']) ? $product['installmentsfree'] : 'NULL';\n        $installmentsprice= isset($product['installmentsprice']) ? $product['installmentsprice'] : 'NULL';\n\n\n        //Perform INSERT .... ON DUPLICATE KEY UPDATE .... - insert value, if value with such primary key exists, update certain fields\n        $sql = 'insert into temp_products VALUES (\n                  '.getAttributeOrNull($id).',\n                  '.getAttributeOrNull($title).',\n                  '.trim(str_replace(' ','',getAttributeOrNull($priceInteger)), '\\'').',\n                  '.getAttributeOrNull($sellerName).',\n                  '.getAttributeOrNull($sellerListingUrl).',\n                 '.getAttributeOrNull($quantityWithLabel).',\n                  '.getAttributeOrNull($quantity).',\n                  '.getAttributeOrNull($description).',\n                  '.convertBoolean($superSellerActive).',\n                  '.str_replace('Condition', '',str_replace('http://schema.org/','',getAttributeOrNull($itemCondition))).',\n                  '.$endingDate.',\n                  '.getAttributeOrNull($nextPrice).',\n                  '.getAttributeOrNull($label).',\n                  '.getAttributeOrNull($installmentsquantity).',\n                  '.convertBoolean($installmentsfree).',\n                  '.getAttributeOrNull($installmentsprice).') \n                  ON DUPLICATE KEY UPDATE title = values(title),priceInteger = values(priceInteger),sellerName = values(sellerName),\n                  sellerListingUrl = values(sellerListingUrl),quantityWithLabel = values(quantityWithLabel),quantity = values(quantity),description = values(description),superSellerActive = values(superSellerActive),\n                  itemCondition = values(itemCondition),endingDate = values(endingDate),nextPrice = values(nextPrice),label = values(label),installmentsquantity = values(installmentsquantity),\n                  installmentsprice = values(installmentsprice),installmentsfree = values(installmentsfree);';\n\n        //If something went wrong add id of failed insert to $failed array\n        if(!$this->db->query($sql)){\n            $failed[] = $product['_id'];\n        }\n    }\n    //Commit transaction. This query is used after loop inserts to summarise transaction and speed it up\n    $commitsql = 'commit';\n    $this->db->query($commitsql);\n    //Pack data with errors and amount of rows affected to array and return it\n    $result['failed']=$failed;\n    $result['numrows']=$this->db->count_all('temp_products');\n    return $result;\n}\n\n\n\nLoad Model\n\uf0c1\n\n\n\n\nThis model handles all the logic behind Load process. \nIt collects data from \ntemp_products\n MySQL table, converts data types, appends timestamp and compares record with target data warehouse.\nIf the record with the same key exists, modify it and change \nmodify_id\n and \nmodify_date\n columns, otherwise insert.\n\n\nConstructor\n\uf0c1\n\n\n/**\n * Load_model constructor.\n * Here we connect to databases and load helpers\n */\nfunction __construct()\n{\n    //connect to mysql, connection parameters are in application/config/database.php\n    $this->load->database('mysql');\n}\n\n\n\nMain Function\n\uf0c1\n\n\n/**\n * Main function of Load process which uses other functions\n * @param $numrows - amount of rows to load from temp_products to products tables\n * @param $mod_id - identifier of a process which initiates load\n * @return array - report on load process\n */\npublic function runLoad($numrows, $mod_id){\n    //Load timer\n    $this->load->library('timer');\n    //start timer\n    $this->timer->start();\n    //Set imitial limit to unlimited\n    $limit = '';\n    //If user specified limit overwrite initial limit\n    if($numrows!=0){\n        $limit = 'limit '.$numrows;\n    }\n    //Prepare select query\n    $selectsql = 'select * from temp_products '.$limit.';';\n    //Select everything from temp_products\n    $selectquery = $this->db->query($selectsql);\n    //Start sql transaction. This query is used before loops to speed up sql inserts\n    $transactionsql = 'START TRANSACTION';\n    $this->db->query($transactionsql);\n    //Create counters for inserted, updated and not affected rows\n    $count_insert =0;\n    $count_update = 0;\n    $count_notaffected = 0;\n\n    //Loop through all records which we selected from `temp_products` and compare with records in 'products'\n    foreach ($selectquery->result() as $row){\n        //Set id of a process which is used to create records\n        $create_id = $mod_id;\n        //Prepare sql: Insert if there is no such record, update on duplicate key if there is such record with different data\n        $loadsql = 'insert into products (`_id`, title, price, seller_name, seller_url, coins, available_quantity, description, super_status, item_condition, auction_ending_date, next_price, popularity_data, installments_quantity, free_installments, installments_price, create_id) VALUES (\n                  \\''.$row->_id.'\\',\n                  \\''.$row->title.'\\',\n                  \\''.$row->priceInteger.'\\',\n                  \\''.$row->sellerName.'\\',\n                  \\''.$row->sellerListingUrl.'\\',\n                 \\''.$row->quantityWithLabel.'\\',\n                  \\''.$row->quantity.'\\',\n                  \\''.$row->description.'\\',\n                  \\''.$row->superSellerActive.'\\',\n                  \\''.$row->itemCondition.'\\',\n                  \\''.$row->endingDate.'\\',\n                  \\''.$row->nextPrice.'\\',\n                  \\''.$row->label.'\\',\n                  \\''.$row->installmentsquantity.'\\',\n                  \\''.$row->installmentsfree.'\\',\n                  \\''.$row->installmentsprice.'\\',\n                  \\''.$create_id.'\\') \n                  ON DUPLICATE KEY UPDATE modify_id = values(create_id), title = values(title),price = values(price),seller_name = values(seller_name),\n                  seller_url = values(seller_url),coins = values(coins),available_quantity = values(available_quantity),description = values(description),super_status = values(super_status),\n                  item_condition = values(item_condition),auction_ending_date = values(auction_ending_date),next_price = values(next_price),popularity_data = values(popularity_data),installments_quantity = values(installments_quantity),\n                  installments_price = values(installments_price),free_installments = values(free_installments);';\n        //Run previously prepared sql\n        $this->db->query($loadsql);\n        //Increase counters based on what happened with record\n        if($this->db->affected_rows()==1){\n            $count_insert += 1;\n        }elseif($this->db->affected_rows()==2){\n            $count_update += 1;\n        }else{\n            $count_notaffected += 1;\n        }\n    }\n    //Commit transaction. This query is used after loop inserts to summarise transaction and speed it up\n    $commitsql = 'commit';\n    $this->db->query($commitsql);\n\n    //Pack and return report data: counters and execution time\n    return ['executiontime'=>$this->timer->stop(),'inserted' => $count_insert, 'updated' => $count_update, 'not_affected'=>$count_notaffected];\n}\n\n\n\nOther Functions\n\uf0c1\n\n\n/**\n * Function which is used to get rows quantity from temp_products table\n * @return int - amount of rows\n */\npublic function getRowsQuantity(){\n    return $this->db->count_all('temp_products');\n}\n\n\n\nCrud Model\n\uf0c1\n\n\n\n\nThis model handles all the logic which is used in other models and controller when they need to perform Create Read Update Delete (CRUD) operations on\nany data structures involved in application workflow, be it MongoDB collections or MySQL tables.\n\n\nFields\n\uf0c1\n\n\n/**\n * variable which holds object responsible for connection with MongoDB\n * @var \\MongoDB\\Client\n */\nprivate $mongoClient;\n\n\n\nConstructor\n\uf0c1\n\n\n/**\n * Crud_model constructor.\n * Here we connect to databases and load helpers\n */\nfunction __construct()\n{\n    //connect to MongoDB\n    $this->mongoClient= new \\MongoDB\\Client('mongodb+srv://root:root@kreslav-hcr9i.mongodb.net/test?retryWrites=true');\n    //Load helpers\n    $this->load->helper('url');\n    $this->load->helper('crud');\n    //connect to mysql, connection parameters are in application/config/database.php\n    $this->load->database('mysql');\n}\n\n\n\nOther Functions\n\uf0c1\n\n\nFunction which allows us to perform filter on mongoDB collection.\n\n\n/**\n * Function which allows us to perform filter on mongoDB collection\n * @param $input_collection - name of collection\n * @param $input_filter - valid json filter\n * @return array - query result\n */\npublic function get_collection($input_collection, $input_filter){\n    //Decode json filter to string\n    $filter = json_decode($input_filter);\n    //Assign collection to variable\n    $collection = $this->mongoClient->extracthub->$input_collection;\n    //Perform find() operation on collection with given filer and return result as cursor object. Default limit for amount of returned results is 20\n    $cursor = $collection->find($filter, ['limit'=>20]);\n    //Initiate result container\n    $result = [];\n    //Loop through cursor object and convert BSON cursor to php array\n    foreach ($cursor as $id=>$document){\n        $result[$id] = json_encode($document);\n    }\n    //Pack array as well as amount of documents and name of a collection and return it\n    return ['documents'=>$result, 'num_documents' => $collection->count($filter), 'table_name' =>$input_collection, 'filter'=>$input_filter];\n}\n\n\n\nFunction which allows us to perform query on sql table.\n\n\n/**\n * Function which allows us to perform query on sql table\n * @param $sql - query string\n * @param $table - table name\n * @return array - query result\n */\npublic function getResult($sql, $table){\n    //Validate sql string\n    $sqlstring = validateSql($sql);\n    //If string doesnt contain word Select or name of the current table return error\n    if (!preg_match('/\\b'.$table.'\\b/',$sqlstring) ||!preg_match('/\\bselect\\b/',$sqlstring)) {\n        return ['success' => '0','table_name'=>$table, 'query'=>$sqlstring, 'error'=>['code'=>'1','message'=>'Please provide valid SELECT query string to table '.$table]];\n    }\n    //Run query with provided sql string on a provided table\n    $query = $this->db->query($sqlstring);\n    //If query succeded\n    if( $query !== FALSE ){\n        //trim last query string from limit keyword\n        $querystring = str_replace('limit 100','',$this->db->last_query());\n        //assign result to an array\n        $result = $query->result_array();\n        //assign names of columns in table to variable\n        $columns = $query->list_fields();\n        //get total amount of rows which satisfy last query\n        $numrows = $this->db->query('select count(*) '.strstr($sqlstring,'from'))->result_array();\n        //pack data report and return it\n        return ['success' => '1',\n            'rows' => $result,\n            'column_names' => $columns,\n            'table_name'=>$table,\n            'numrows'=>$numrows[0]['count(*)'],\n            'query'=>$querystring];\n    }\n    //If query failed return error\n    return ['success' => '0','table_name'=>$table, 'error'=> $this->db->error()];\n\n}\n\n\n\nFunction which allows delete everything from table or collection.\n\n\n/**\n * Function which allows delete everything from table or collection\n * @param $input - array of tables/collection to clean up\n * @return array - report which contains which data structures cleaned up successfully and which failed\n */\npublic function cleanUp($input){\n    //Prepare container to store result\n    $result = [];\n    //if input is empty return empty result\n    if(!isset($input) or $input == NULL){\n        return $result;\n    }\n    //Loop through data structures(table or collection) in input array\n    foreach ($input as $datastructure){\n        //If data structure is sql perform sql delete\n        if(getDbType($datastructure) =='sql'){\n            //Trim sql_ prefix from name of a table\n            $datastructure = str_replace('sql_', '',$datastructure);\n            //If sql delete was successful add name of data structure to array of successful results\n            if($this->db->query('DELETE FROM '.$datastructure) !== FALSE){\n                $result['clean_succ'][] = $datastructure;\n            }else{\n                //If sql delete was NOT successful add name of data structure to array of FAILED results\n                $result['clean_fail'][] = $datastructure;\n            }\n        }else{\n            //If data structure is not sql, then it is mongodb, so perform a MongoDB specific Deletion process\n            //Assign collection to variable\n            $collection = $this->mongoClient->extracthub->$datastructure;\n            //Delete everything from this collection\n            $collection->deleteMany([]);\n            //Add name of this collection to the array of successful results\n            $result['clean_succ'][] = $datastructure;\n        }\n\n    }\n    return $result;\n}\n\n\n\nGetter which allows to retrieve current application phase from database.\n\n\n/**\n * Getter which allows to retrieve current application phase from database\n * @return array - phase\n */\npublic function get_phase(){\n    //Prepare sql query.\n    $sql = 'select state from phase';\n    //Run query\n    $query = $this->db->query($sql);\n    //If query failed return error\n    if($query === FALSE){\n        return $this->db->error();\n        }\n    //Assign query result to array\n    $result = $query->result_array();\n    //Assign values of `state` columns to $currentphase variable\n    $currentphase = $result[0]['state'];\n    return $currentphase;\n}\n\n\n\nSetter which allows to change application phase in database.\n\n\n/**\n * Setter which allows to change application phase in database\n * @param $phase\n * @return array|bool - true or error while connection to database\n */\npublic function set_phase($phase){\n    //Prepare sql query. Update table `phase` with new phase value\n    $sql = 'update phase set state = \\''.$phase.'\\';';\n    //Run query\n    $query = $this->db->query($sql);\n    //If query failed return error\n    if($query === FALSE){\n        return $this->db->error();\n    }\n    return true;\n}\n\n\n\nGetter which allows to retrieve settings from database.\n\n\n/**\n * Getter which allows to retrieve settings from database\n * @return array - array of key=>value settings\n */\npublic function get_settings(){\n    //Prepare sql query. Select settings from `settings` table\n    $sql = 'select * from settings';\n    //Run query\n    $query = $this->db->query($sql);\n    //If query failed return error\n    if($query === FALSE){\n        return $this->db->error();\n    }\n    //Assign query result to array\n    $result = $query->result_array();\n    //Assign values of settings columns to appropriate variables\n    $category = $result[0]['category'];\n    $restriction = $result[0]['restriction_level'];\n    return ['category'=>''.$category,'restriction_level'=>$restriction];\n}\n\n\n\nSetter which allows to write settings to database.\n\n\n/**\n * Setter which allows to write settings to database\n * @param array $settings\n * @return array|bool\n */\npublic function set_settings(array $settings){\n    //Prepare sql query. Update table `settings` with new settings values\n    $sql = 'update settings set category = \\''.$settings['category'].'\\', restriction_level = \\''.$settings['restriction_level'].'\\';';\n    //Run query\n    $query = $this->db->query($sql);\n    //If query failed return error\n    if($query === FALSE){\n        return $this->db->error();\n    }\n    return true;\n}\n\n\n\nFunction that checks if page is allowed to be opened at current phase.\n\n\n/**\n * Function that checks if page is allowed to be opened at current phase\n * @param $page - page to check\n * @param $phase - phase\n * @return array|bool - allowed or not or error during database query\n */\npublic function check_restrictions($page, $phase){\n    //Get settings from database\n    $settings = $this->get_settings();\n    //Get current restriction level from settings array\n    $restriction_level = $settings['restriction_level'];\n\n    if ($restriction_level == 'strict'){\n        //If restriction level is strict then allow only pages which are the same as current phase. e.g. page extract will be opened only on phase extract\n        return $page == $phase;\n    }elseif ($restriction_level == 'development'){\n        //If restriction level is development then return true for any page and allow any page\n        return true;\n    }elseif ($restriction_level == 'soft'){\n        //If restriction level is soft then allow to run page which corresponds to phase and previous one\n        switch($phase){\n            case 'extract':\n                if($page == 'extract' || $page == 'load'){\n                    return true;\n                }else{\n                    return false;\n                }\n            case 'transform':\n                if($page == 'transform' || $page == 'extract'){\n                    return true;\n                }else{\n                    return false;\n                }\n            case 'load':\n                if($page == 'load' || $page == 'transform'){\n                    return true;\n                }else{\n                    return false;\n                }\n            default:\n                //If database was corrupted and phase is not one of the values \"extract\", \"transform\" or \"load\" return error\n                return ['error'=>'phase is not valid, check database'];\n        }\n\n    }\n    //If database was corrupted and restriction level is not one of the values \"development\", \"soft\" or \"strict\" return error\n    return ['error'=>'restriction_level is not valid, check database'];\n}\n\n\n\nFunction that allows to download csv file with the content of query.\n\n\n/**\n * Function that allows to download csv file with the content of query\n * @param $sql_query - sql query\n */\npublic function get_csv($sql_query){\n    //Load helpers\n    $this->load->dbutil();\n    $this->load->helper('file');\n    $this->load->helper('download');\n    //Query database\n    $query = $this->db->query($sql_query);\n    //Set delimiter to comma\n    $delimiter = \",\";\n    //Set newline character\n    $newline = \"\\r\\n\";\n    //generate csv file from query result\n    $data = $this->dbutil->csv_from_result($query, $delimiter, $newline);\n    //force csv file download\n    force_download('CSV_Report.csv', $data);\n}",
            "title": "Models"
        },
        {
            "location": "/models/#application-models",
            "text": "Application makes use of 4 models, each one handles business logic of respective module of the program.     Extract_model  - handles the Extract process as well as manages the connection with MongoDB temporal collections.    Transform_model  - handles the Transform process as well as manages the connection with MongoDB and MySQL temporal databases.    Load_model  - handles the Load process as well as manages the connection with target Data Warehouse.    Crud_model  - handles all logic which is responsible for interaction with both MongoDB and MySQL databases. Is used in all other models and a controller.",
            "title": "Application Models"
        },
        {
            "location": "/models/#extract-model",
            "text": "This model handles all the logic behind Extract process. \nIt connects to remote web-page, scraps data and inserts it into temporal MongoDB collection named  extracted .",
            "title": "Extract Model"
        },
        {
            "location": "/models/#fields",
            "text": "/**\n * Variable which contains global application settings\n * @var\n */\nprivate $settings;",
            "title": "Fields"
        },
        {
            "location": "/models/#constructor",
            "text": "/**\n * Extract_model constructor.\n * Loads helpers, other models, libraries and settings\n */\nfunction __construct()\n{\n    //Load crud model so we can read settings from database\n    $this->load->model('crud_model');\n    //Load settings from database via crud_model\n    $this->settings = $this->crud_model->get_settings();\n\n    //Load helpers with usefull functions\n    $this->load->helper('url'); //built-in\n    $this->load->helper('extract'); //custom\n}",
            "title": "Constructor"
        },
        {
            "location": "/models/#main-function",
            "text": "/**\n * Main function of Extract process which uses all other functions\n * @param int $amountOfPages - amount of pages to extract from allegro category\n * @return mixed - returns report with data about extract process\n */\npublic function runExtractorAsync($amountOfPages = 1)\n{\n    //Load timer library\n    $this->load->library('timer');\n    //Start timer\n    $this->timer->start();\n    //Set php timeout to 0 so it will not timeout during lengthy scraping process\n    set_time_limit(0);\n    //Extract links from allegro category pages\n    $links = $this->extractLinks($amountOfPages);\n    //Create multi-threading loop\n    $loop = React\\EventLoop\\Factory::create();\n    //Create virtual browser which will process pages\n    $client = new Browser($loop);\n    //Load scraper class which will scrape data from products\n    $this->load->library('scraper');\n    //Set browser client for scraper\n    $this->scraper->setClient($client);\n    //Set data on which scraper will operate. Links is an array of product links from allegro category, 10 is an amount of simultaneous request\n    $this->scraper->scrape($links, 10);\n    //Start multi-threading loop\n    $loop->run();\n    //After loop finished looping, retrieve data from scraper\n    $products = $this->scraper->getData();\n    //Insert data to database\n    $query = $this->loadToDatabase($products);\n    //Pack data to be sent as a report of a process\n    $result = [\n        'amount' => [\n            'parsed' => count($links),\n            'affected' => $query['inserted'],\n            'notaffected' => $query['matched'],\n            ],\n        'executiontime' =>  $this->timer->stop()\n    ];\n\n    return $result;\n}",
            "title": "Main Function"
        },
        {
            "location": "/models/#other-functions",
            "text": "Function which returns amount of pages in category.  /**\n * Function which is used to get pages quantity from category\n * @return mixed - amount of pages\n */\npublic function getPagesQuantity()\n{\n    //Get category from settings\n    $category[] = $this->settings['category'];\n    //Load category crawler\n    $this->load->library('categorycrawler', $category);\n    //Send crawler to get amount of pages from current working category\n    $amountOfPages = $this->categorycrawler->getAmountOfPages();\n    return $amountOfPages;\n}  Function which extracts links.  /**\n * Function which extracts links to products from current category\n * @param $amountOfPages - from how many pages we want to extract links\n * @return array - array with product links\n */\npublic function extractLinks($amountOfPages)\n{\n    //Set from how many pages from category we wont to extract links\n    $count = $amountOfPages;\n    $i = 1;\n    //Empty container which will be populated with links\n    $links = array();\n    //Extract links from category pages in a loop while i is smaller that requested amount of pages\n    while ($i <= $count) {\n        //Create link to new category page which looks like https://allegro.pl/category?p=i where ?p=i part shows page from which we will extract links\n        $category_page[0] = $this->settings['category'].'?p='.$i;\n        //Create category crawler and send it to collect links from this page\n        $crawlers = new categorycrawler($category_page);\n        //Populate $links array with links which category crawler brought to us\n        $links[] = $crawlers->getProductLinksFromPage();\n        //Increase value of i\n        $i++;\n    }\n    //Aggregate links to one-dimesional array for further ease of processing\n    $links = toSingleArray($links);\n    return $links;\n\n}  Function which loads data objects to database.  /**\n * Function which loads extracted data to mongo database\n * @param array $array - array of extracted data\n * @return array - report of load process\n */\npublic function loadToDatabase(array $array)\n{\n    //Create a bulk object\n    $bulk = new \\MongoDB\\Driver\\BulkWrite(['ordered' => false]);\n    //Populate bulk object with records to be inserted in database\n    foreach ($array as $item) {\n        $bulk->update(\n            ['_id' => $item['notifyAndWatch']['offerId']],\n            array('$setOnInsert' => $item),\n            array('upsert' => true)\n        );\n    }\n    //Create manager which will perform bulk write to a certain mongodb database. Provide credentials to database as parameter\n    $manager = new \\MongoDB\\Driver\\Manager('mongodb+srv://root:root@kreslav-hcr9i.mongodb.net');\n    //Create error handler, if something stucks it will throw an appropriate error\n    $writeConcern = new \\MongoDB\\Driver\\WriteConcern(\\MongoDB\\Driver\\WriteConcern::MAJORITY, 100);\n    //Let manager execute bulk insert\n    $insert_result = $manager->executeBulkWrite('extracthub.products', $bulk, $writeConcern);\n    //Pack data and report how many records has been inserted and how many were already present in database\n    return [\n        'inserted' => $insert_result->getUpsertedCount(),\n        'matched' => $insert_result->getMatchedCount()\n    ];\n}",
            "title": "Other Functions"
        },
        {
            "location": "/models/#transform-model",
            "text": "This model handles all the logic behind Transform process. \nIt collects data from  extracted  temporal collection, aggregates and pushes it to another temporal collection aggregated  and then converts data types and migrates data to  temp_products  MySQL table.",
            "title": "Transform Model"
        },
        {
            "location": "/models/#fields_1",
            "text": "/**\n * Variable which holds object responsible for connection with MongoDB\n * @var \\MongoDB\\Client\n */\nprivate $mongoClient;",
            "title": "Fields"
        },
        {
            "location": "/models/#constructor_1",
            "text": "/**\n * Transform_model constructor.\n * Here we connect to databases and load helpers\n */\nfunction __construct()\n{\n    //connect to MongoDB\n    $this->mongoClient= new \\MongoDB\\Client('mongodb+srv://root:root@kreslav-hcr9i.mongodb.net/test?retryWrites=true');\n    //connect to mysql, connection parameters are in application/config/database.php\n    $this->load->database('mysql');\n    //Load helpers\n    $this->load->helper('url');\n    $this->load->helper('transform');\n}",
            "title": "Constructor"
        },
        {
            "location": "/models/#main-function_1",
            "text": "/**\n * Main function of Transform process which uses other functions\n * @param $input - set of checkboxes which show what data do we want to transform\n * @return mixed - report with data about transform process\n */\npublic function runTransform($input){\n    //Set php time limit to 0 so it wont timeout during long process of quering database\n    set_time_limit(0);\n    //Load timer library\n    $this->load->library('timer');\n    //Start time\n    $this->timer->start();\n    //Aggregate data from mongoDB and write aggregation report to $result['mongodb']\n    $result['mongodb'] = $this->aggregateData($input);\n    //Transform data from aggregated mongodb collection to temp_products sql table and write report to variable $result['mysql']\n    $result['mysql'] = $this->transformToSql();\n    //stop timer and write execution time to $result['executiontime'] variable\n    $result['executiontime']=$this->timer->stop();\n    return $result;\n}",
            "title": "Main Function"
        },
        {
            "location": "/models/#other-functions_1",
            "text": "Setter which is used to save transform settings to database.  /**\n * Function which is used to save information which checkboxes from transform page has to remain checked when we reload page\n * @param $input - array of checkboxes\n * @param $consent - do we want to set array of checkboxes as default or no\n */\npublic function setChoice($input, $consent){\n    //check if we really want to sent it as default\n    if($consent != 'default'){\n        //if not do nothing and exit function\n        return;\n    }\n    //clear previous default set of checkboxes which are stored in database\n    $this->db->query('DELETE from choice');\n    //Start sql transaction. This query is used before loops to speed up sql inserts\n    $transactionsql = 'START TRANSACTION';\n    $this->db->query($transactionsql);\n    //Insert information with names of checkboxes which we want to remain checked at later loads\n    foreach ($input as $checkbox){\n        $sql = 'insert into choice (checkbox) value (\"'.$checkbox.'\");';\n        $this->db->query($sql);\n    }\n    //Commit transaction. This query is used after loop inserts to summarise transaction and speed it up\n    $commitsql = 'commit';\n    $this->db->query($commitsql);\n}  Getter which is used to retrieve transform settings.  /**\n * Function which is used to retrieve information from database about which checkboxes should be checked on page load.\n * It loads default set of checkboxes\n * @return array - array of checkboxes which have to be checked\n */\npublic function getChoice(){\n    //Select everything from choice table\n    $sql = 'select * from choice';\n    $query = $this->db->query($sql);\n    $result = [];\n    //Write names of checkboxes to result array and return int\n    foreach ($query->result() as $row){\n        $result[] = $row->checkbox;\n    }\n    return $result;\n}  Function which aggregates data via Mongo aggregation pipeline.  /**\n * Function which extracts only useful data from big mongoDB object and aggregates it to simple key=>value pair\n * @param array $arrayOfValues - set of checkboxes which show what data do we want to aggregate\n * @return Traversable - object which contains report about aggregation process\n */\npublic function aggregateData(array $arrayOfValues){\n    //Assign mongodb collection 'products' to a variable\n    $extracted = $this->mongoClient->extracthub->products;\n    //Generate aggregation options based on array of chosen values\n    $options = $this->generateAggregateOptions($arrayOfValues);\n    //Assign mongodb collection 'aggregated' to a variable\n    $aggregated = $this->mongoClient->extracthub->aggregated;\n    //Clear 'aggregated' collection from any previous data\n    $aggregated->deleteMany([]);\n    //Use aggregation pipeline framework with aggregation options on collection with big objects\n    $result = $extracted->aggregate($options);\n    return $result;\n}  Function which generates options for aggregation pipeline.  /**\n * Function that sets and generates aggregation options\n * @param array $arrayOfValues - set of checkboxes which show what data do we want to aggregate\n * @return array - array of options to pass to aggregation pipeline\n */\npublic function generateAggregateOptions(array $arrayOfValues){\n    //Set what attributes do we want to project during aggregation\n    //project id always\n    $project = [\"id\"=>1];\n    //Foreach attribute project it as its final name and reduce nesting to single level\n    foreach ($arrayOfValues as $attribute){\n        //Determine how deeply is attribute nested by exploding it by dot\n        $explodedAttribute = explode('.', $attribute);\n        //Amount of product elements = depth of nesting\n        $amount = count($explodedAttribute);\n        //If attribute is nested reduce nesting (e.g. price.installments.installmentsQuantity becomes just installmentsQuantity)\n        if($amount>2){\n            $project[$explodedAttribute[$amount-2].''.$explodedAttribute[$amount-1]] = '$'.$attribute;\n        }else{\n            $project[$explodedAttribute[1]] = '$'.$attribute;\n        }\n\n    }\n    //Create aggregation pipeline\n    $ops = array(\n        array(\n            '$project' => $project //array of options which configure how to project attributes\n        ),\n        array(\n            '$out' => \"aggregated\" //output of aggregation write directly to `aggregated` collection\n        )\n    );\n    //Return aggregation pipeline\n    return $ops;\n}  MongoDB to MySQL migrator.  /**\n * Function that migrates data from mongoDB to sql table\n * @return mixed - report on migration process\n */\npublic function transformToSql(){\n    //Refresh connection to sql database\n    $this->db->reconnect();\n    //Assign mongoDB collection to variable\n    $mongodb = $this->mongoClient->extracthub->aggregated;\n    //Find everything in this collection and assign to cursor object\n    $cursor = $mongodb->find();\n    //Container which will host failed inserts\n    $failed =[];\n    //Start sql transaction. This query is used before loops to speed up sql inserts\n    $transactionsql = 'START TRANSACTION';\n    $this->db->query($transactionsql);\n\n    //Loop through all products in MongoDB cursor\n    foreach ($cursor as $product){\n        //If cursor doesn't have this value assign string \"NULL\" to it\n        //During assignment convert boolean values to respective strings using helper methods\n        $id= isset($product['_id']) ? $product['_id'] : 'NULL';\n        $title= isset($product['title']) ? $product['title'] : 'NULL';\n        $priceInteger= isset($product['priceInteger']) ? $product['priceInteger'] : 'NULL';\n        $sellerName= isset($product['sellerName']) ? $product['sellerName'] : 'NULL';\n        $sellerListingUrl= isset($product['sellerListingUrl']) ? $product['sellerListingUrl'] : 'NULL';\n        $quantityWithLabel= isset($product['quantityWithLabel']) ? $product['quantityWithLabel'] : 'NULL';\n        $quantity= isset($product['quantity']) ? $product['quantity'] : 'NULL';\n        $description= isset($product['description']) ? $product['description'] : 'NULL';\n        $superSellerActive= isset($product['superSellerActive']) ? $product['superSellerActive'] : 'NULL';\n        $itemCondition= isset($product['itemCondition']) ? $product['itemCondition'] : 'NULL';\n        $endingDate= isset($product['endingDate']) ? $product['endingDate'] : 'NULL';\n        $endingDate = getAttributeOrNull($endingDate);\n        $nextPrice= isset($product['nextPrice']) ? $product['nextPrice'] : 'NULL';\n        $label= isset($product['label']) ? $product['label'] : 'NULL';\n        $installmentsquantity= isset($product['installmentsquantity']) ? $product['installmentsquantity'] : 'NULL';\n        $installmentsfree= isset($product['installmentsfree']) ? $product['installmentsfree'] : 'NULL';\n        $installmentsprice= isset($product['installmentsprice']) ? $product['installmentsprice'] : 'NULL';\n\n\n        //Perform INSERT .... ON DUPLICATE KEY UPDATE .... - insert value, if value with such primary key exists, update certain fields\n        $sql = 'insert into temp_products VALUES (\n                  '.getAttributeOrNull($id).',\n                  '.getAttributeOrNull($title).',\n                  '.trim(str_replace(' ','',getAttributeOrNull($priceInteger)), '\\'').',\n                  '.getAttributeOrNull($sellerName).',\n                  '.getAttributeOrNull($sellerListingUrl).',\n                 '.getAttributeOrNull($quantityWithLabel).',\n                  '.getAttributeOrNull($quantity).',\n                  '.getAttributeOrNull($description).',\n                  '.convertBoolean($superSellerActive).',\n                  '.str_replace('Condition', '',str_replace('http://schema.org/','',getAttributeOrNull($itemCondition))).',\n                  '.$endingDate.',\n                  '.getAttributeOrNull($nextPrice).',\n                  '.getAttributeOrNull($label).',\n                  '.getAttributeOrNull($installmentsquantity).',\n                  '.convertBoolean($installmentsfree).',\n                  '.getAttributeOrNull($installmentsprice).') \n                  ON DUPLICATE KEY UPDATE title = values(title),priceInteger = values(priceInteger),sellerName = values(sellerName),\n                  sellerListingUrl = values(sellerListingUrl),quantityWithLabel = values(quantityWithLabel),quantity = values(quantity),description = values(description),superSellerActive = values(superSellerActive),\n                  itemCondition = values(itemCondition),endingDate = values(endingDate),nextPrice = values(nextPrice),label = values(label),installmentsquantity = values(installmentsquantity),\n                  installmentsprice = values(installmentsprice),installmentsfree = values(installmentsfree);';\n\n        //If something went wrong add id of failed insert to $failed array\n        if(!$this->db->query($sql)){\n            $failed[] = $product['_id'];\n        }\n    }\n    //Commit transaction. This query is used after loop inserts to summarise transaction and speed it up\n    $commitsql = 'commit';\n    $this->db->query($commitsql);\n    //Pack data with errors and amount of rows affected to array and return it\n    $result['failed']=$failed;\n    $result['numrows']=$this->db->count_all('temp_products');\n    return $result;\n}",
            "title": "Other Functions"
        },
        {
            "location": "/models/#load-model",
            "text": "This model handles all the logic behind Load process. \nIt collects data from  temp_products  MySQL table, converts data types, appends timestamp and compares record with target data warehouse.\nIf the record with the same key exists, modify it and change  modify_id  and  modify_date  columns, otherwise insert.",
            "title": "Load Model"
        },
        {
            "location": "/models/#constructor_2",
            "text": "/**\n * Load_model constructor.\n * Here we connect to databases and load helpers\n */\nfunction __construct()\n{\n    //connect to mysql, connection parameters are in application/config/database.php\n    $this->load->database('mysql');\n}",
            "title": "Constructor"
        },
        {
            "location": "/models/#main-function_2",
            "text": "/**\n * Main function of Load process which uses other functions\n * @param $numrows - amount of rows to load from temp_products to products tables\n * @param $mod_id - identifier of a process which initiates load\n * @return array - report on load process\n */\npublic function runLoad($numrows, $mod_id){\n    //Load timer\n    $this->load->library('timer');\n    //start timer\n    $this->timer->start();\n    //Set imitial limit to unlimited\n    $limit = '';\n    //If user specified limit overwrite initial limit\n    if($numrows!=0){\n        $limit = 'limit '.$numrows;\n    }\n    //Prepare select query\n    $selectsql = 'select * from temp_products '.$limit.';';\n    //Select everything from temp_products\n    $selectquery = $this->db->query($selectsql);\n    //Start sql transaction. This query is used before loops to speed up sql inserts\n    $transactionsql = 'START TRANSACTION';\n    $this->db->query($transactionsql);\n    //Create counters for inserted, updated and not affected rows\n    $count_insert =0;\n    $count_update = 0;\n    $count_notaffected = 0;\n\n    //Loop through all records which we selected from `temp_products` and compare with records in 'products'\n    foreach ($selectquery->result() as $row){\n        //Set id of a process which is used to create records\n        $create_id = $mod_id;\n        //Prepare sql: Insert if there is no such record, update on duplicate key if there is such record with different data\n        $loadsql = 'insert into products (`_id`, title, price, seller_name, seller_url, coins, available_quantity, description, super_status, item_condition, auction_ending_date, next_price, popularity_data, installments_quantity, free_installments, installments_price, create_id) VALUES (\n                  \\''.$row->_id.'\\',\n                  \\''.$row->title.'\\',\n                  \\''.$row->priceInteger.'\\',\n                  \\''.$row->sellerName.'\\',\n                  \\''.$row->sellerListingUrl.'\\',\n                 \\''.$row->quantityWithLabel.'\\',\n                  \\''.$row->quantity.'\\',\n                  \\''.$row->description.'\\',\n                  \\''.$row->superSellerActive.'\\',\n                  \\''.$row->itemCondition.'\\',\n                  \\''.$row->endingDate.'\\',\n                  \\''.$row->nextPrice.'\\',\n                  \\''.$row->label.'\\',\n                  \\''.$row->installmentsquantity.'\\',\n                  \\''.$row->installmentsfree.'\\',\n                  \\''.$row->installmentsprice.'\\',\n                  \\''.$create_id.'\\') \n                  ON DUPLICATE KEY UPDATE modify_id = values(create_id), title = values(title),price = values(price),seller_name = values(seller_name),\n                  seller_url = values(seller_url),coins = values(coins),available_quantity = values(available_quantity),description = values(description),super_status = values(super_status),\n                  item_condition = values(item_condition),auction_ending_date = values(auction_ending_date),next_price = values(next_price),popularity_data = values(popularity_data),installments_quantity = values(installments_quantity),\n                  installments_price = values(installments_price),free_installments = values(free_installments);';\n        //Run previously prepared sql\n        $this->db->query($loadsql);\n        //Increase counters based on what happened with record\n        if($this->db->affected_rows()==1){\n            $count_insert += 1;\n        }elseif($this->db->affected_rows()==2){\n            $count_update += 1;\n        }else{\n            $count_notaffected += 1;\n        }\n    }\n    //Commit transaction. This query is used after loop inserts to summarise transaction and speed it up\n    $commitsql = 'commit';\n    $this->db->query($commitsql);\n\n    //Pack and return report data: counters and execution time\n    return ['executiontime'=>$this->timer->stop(),'inserted' => $count_insert, 'updated' => $count_update, 'not_affected'=>$count_notaffected];\n}",
            "title": "Main Function"
        },
        {
            "location": "/models/#other-functions_2",
            "text": "/**\n * Function which is used to get rows quantity from temp_products table\n * @return int - amount of rows\n */\npublic function getRowsQuantity(){\n    return $this->db->count_all('temp_products');\n}",
            "title": "Other Functions"
        },
        {
            "location": "/models/#crud-model",
            "text": "This model handles all the logic which is used in other models and controller when they need to perform Create Read Update Delete (CRUD) operations on\nany data structures involved in application workflow, be it MongoDB collections or MySQL tables.",
            "title": "Crud Model"
        },
        {
            "location": "/models/#fields_2",
            "text": "/**\n * variable which holds object responsible for connection with MongoDB\n * @var \\MongoDB\\Client\n */\nprivate $mongoClient;",
            "title": "Fields"
        },
        {
            "location": "/models/#constructor_3",
            "text": "/**\n * Crud_model constructor.\n * Here we connect to databases and load helpers\n */\nfunction __construct()\n{\n    //connect to MongoDB\n    $this->mongoClient= new \\MongoDB\\Client('mongodb+srv://root:root@kreslav-hcr9i.mongodb.net/test?retryWrites=true');\n    //Load helpers\n    $this->load->helper('url');\n    $this->load->helper('crud');\n    //connect to mysql, connection parameters are in application/config/database.php\n    $this->load->database('mysql');\n}",
            "title": "Constructor"
        },
        {
            "location": "/models/#other-functions_3",
            "text": "Function which allows us to perform filter on mongoDB collection.  /**\n * Function which allows us to perform filter on mongoDB collection\n * @param $input_collection - name of collection\n * @param $input_filter - valid json filter\n * @return array - query result\n */\npublic function get_collection($input_collection, $input_filter){\n    //Decode json filter to string\n    $filter = json_decode($input_filter);\n    //Assign collection to variable\n    $collection = $this->mongoClient->extracthub->$input_collection;\n    //Perform find() operation on collection with given filer and return result as cursor object. Default limit for amount of returned results is 20\n    $cursor = $collection->find($filter, ['limit'=>20]);\n    //Initiate result container\n    $result = [];\n    //Loop through cursor object and convert BSON cursor to php array\n    foreach ($cursor as $id=>$document){\n        $result[$id] = json_encode($document);\n    }\n    //Pack array as well as amount of documents and name of a collection and return it\n    return ['documents'=>$result, 'num_documents' => $collection->count($filter), 'table_name' =>$input_collection, 'filter'=>$input_filter];\n}  Function which allows us to perform query on sql table.  /**\n * Function which allows us to perform query on sql table\n * @param $sql - query string\n * @param $table - table name\n * @return array - query result\n */\npublic function getResult($sql, $table){\n    //Validate sql string\n    $sqlstring = validateSql($sql);\n    //If string doesnt contain word Select or name of the current table return error\n    if (!preg_match('/\\b'.$table.'\\b/',$sqlstring) ||!preg_match('/\\bselect\\b/',$sqlstring)) {\n        return ['success' => '0','table_name'=>$table, 'query'=>$sqlstring, 'error'=>['code'=>'1','message'=>'Please provide valid SELECT query string to table '.$table]];\n    }\n    //Run query with provided sql string on a provided table\n    $query = $this->db->query($sqlstring);\n    //If query succeded\n    if( $query !== FALSE ){\n        //trim last query string from limit keyword\n        $querystring = str_replace('limit 100','',$this->db->last_query());\n        //assign result to an array\n        $result = $query->result_array();\n        //assign names of columns in table to variable\n        $columns = $query->list_fields();\n        //get total amount of rows which satisfy last query\n        $numrows = $this->db->query('select count(*) '.strstr($sqlstring,'from'))->result_array();\n        //pack data report and return it\n        return ['success' => '1',\n            'rows' => $result,\n            'column_names' => $columns,\n            'table_name'=>$table,\n            'numrows'=>$numrows[0]['count(*)'],\n            'query'=>$querystring];\n    }\n    //If query failed return error\n    return ['success' => '0','table_name'=>$table, 'error'=> $this->db->error()];\n\n}  Function which allows delete everything from table or collection.  /**\n * Function which allows delete everything from table or collection\n * @param $input - array of tables/collection to clean up\n * @return array - report which contains which data structures cleaned up successfully and which failed\n */\npublic function cleanUp($input){\n    //Prepare container to store result\n    $result = [];\n    //if input is empty return empty result\n    if(!isset($input) or $input == NULL){\n        return $result;\n    }\n    //Loop through data structures(table or collection) in input array\n    foreach ($input as $datastructure){\n        //If data structure is sql perform sql delete\n        if(getDbType($datastructure) =='sql'){\n            //Trim sql_ prefix from name of a table\n            $datastructure = str_replace('sql_', '',$datastructure);\n            //If sql delete was successful add name of data structure to array of successful results\n            if($this->db->query('DELETE FROM '.$datastructure) !== FALSE){\n                $result['clean_succ'][] = $datastructure;\n            }else{\n                //If sql delete was NOT successful add name of data structure to array of FAILED results\n                $result['clean_fail'][] = $datastructure;\n            }\n        }else{\n            //If data structure is not sql, then it is mongodb, so perform a MongoDB specific Deletion process\n            //Assign collection to variable\n            $collection = $this->mongoClient->extracthub->$datastructure;\n            //Delete everything from this collection\n            $collection->deleteMany([]);\n            //Add name of this collection to the array of successful results\n            $result['clean_succ'][] = $datastructure;\n        }\n\n    }\n    return $result;\n}  Getter which allows to retrieve current application phase from database.  /**\n * Getter which allows to retrieve current application phase from database\n * @return array - phase\n */\npublic function get_phase(){\n    //Prepare sql query.\n    $sql = 'select state from phase';\n    //Run query\n    $query = $this->db->query($sql);\n    //If query failed return error\n    if($query === FALSE){\n        return $this->db->error();\n        }\n    //Assign query result to array\n    $result = $query->result_array();\n    //Assign values of `state` columns to $currentphase variable\n    $currentphase = $result[0]['state'];\n    return $currentphase;\n}  Setter which allows to change application phase in database.  /**\n * Setter which allows to change application phase in database\n * @param $phase\n * @return array|bool - true or error while connection to database\n */\npublic function set_phase($phase){\n    //Prepare sql query. Update table `phase` with new phase value\n    $sql = 'update phase set state = \\''.$phase.'\\';';\n    //Run query\n    $query = $this->db->query($sql);\n    //If query failed return error\n    if($query === FALSE){\n        return $this->db->error();\n    }\n    return true;\n}  Getter which allows to retrieve settings from database.  /**\n * Getter which allows to retrieve settings from database\n * @return array - array of key=>value settings\n */\npublic function get_settings(){\n    //Prepare sql query. Select settings from `settings` table\n    $sql = 'select * from settings';\n    //Run query\n    $query = $this->db->query($sql);\n    //If query failed return error\n    if($query === FALSE){\n        return $this->db->error();\n    }\n    //Assign query result to array\n    $result = $query->result_array();\n    //Assign values of settings columns to appropriate variables\n    $category = $result[0]['category'];\n    $restriction = $result[0]['restriction_level'];\n    return ['category'=>''.$category,'restriction_level'=>$restriction];\n}  Setter which allows to write settings to database.  /**\n * Setter which allows to write settings to database\n * @param array $settings\n * @return array|bool\n */\npublic function set_settings(array $settings){\n    //Prepare sql query. Update table `settings` with new settings values\n    $sql = 'update settings set category = \\''.$settings['category'].'\\', restriction_level = \\''.$settings['restriction_level'].'\\';';\n    //Run query\n    $query = $this->db->query($sql);\n    //If query failed return error\n    if($query === FALSE){\n        return $this->db->error();\n    }\n    return true;\n}  Function that checks if page is allowed to be opened at current phase.  /**\n * Function that checks if page is allowed to be opened at current phase\n * @param $page - page to check\n * @param $phase - phase\n * @return array|bool - allowed or not or error during database query\n */\npublic function check_restrictions($page, $phase){\n    //Get settings from database\n    $settings = $this->get_settings();\n    //Get current restriction level from settings array\n    $restriction_level = $settings['restriction_level'];\n\n    if ($restriction_level == 'strict'){\n        //If restriction level is strict then allow only pages which are the same as current phase. e.g. page extract will be opened only on phase extract\n        return $page == $phase;\n    }elseif ($restriction_level == 'development'){\n        //If restriction level is development then return true for any page and allow any page\n        return true;\n    }elseif ($restriction_level == 'soft'){\n        //If restriction level is soft then allow to run page which corresponds to phase and previous one\n        switch($phase){\n            case 'extract':\n                if($page == 'extract' || $page == 'load'){\n                    return true;\n                }else{\n                    return false;\n                }\n            case 'transform':\n                if($page == 'transform' || $page == 'extract'){\n                    return true;\n                }else{\n                    return false;\n                }\n            case 'load':\n                if($page == 'load' || $page == 'transform'){\n                    return true;\n                }else{\n                    return false;\n                }\n            default:\n                //If database was corrupted and phase is not one of the values \"extract\", \"transform\" or \"load\" return error\n                return ['error'=>'phase is not valid, check database'];\n        }\n\n    }\n    //If database was corrupted and restriction level is not one of the values \"development\", \"soft\" or \"strict\" return error\n    return ['error'=>'restriction_level is not valid, check database'];\n}  Function that allows to download csv file with the content of query.  /**\n * Function that allows to download csv file with the content of query\n * @param $sql_query - sql query\n */\npublic function get_csv($sql_query){\n    //Load helpers\n    $this->load->dbutil();\n    $this->load->helper('file');\n    $this->load->helper('download');\n    //Query database\n    $query = $this->db->query($sql_query);\n    //Set delimiter to comma\n    $delimiter = \",\";\n    //Set newline character\n    $newline = \"\\r\\n\";\n    //generate csv file from query result\n    $data = $this->dbutil->csv_from_result($query, $delimiter, $newline);\n    //force csv file download\n    force_download('CSV_Report.csv', $data);\n}",
            "title": "Other Functions"
        },
        {
            "location": "/views/",
            "text": "Application Views\n\uf0c1\n\n\nApplication views are grouped into 3 main categories:\n\n\n\n\nTemplates\n\n\nPages\n\n\nErrors\n\n\n\n\nTemplates\n\uf0c1\n\n\nThis category of views are used to build page from structural parts.\n\n\nIt consists of 5 template parts:\n\n\n\n\nmeta.php\n\n\ntopbar.php\n\n\nsidebar.php\n\n\nfooter.php\n\n\nscript.php\n\n\n\n\nThe body of application page hast to be placed between sidebar and footer element of the template.\n\n\nmeta.php\n - this file contains header of the webpage and loads css files.\n\n\n<?php\n\n?>\n<!DOCTYPE html>\n<!--[if IE 8]><html class=\"no-js lt-ie9\" lang=\"en\" > <![endif]-->\n<!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\" > <!--<![endif]-->\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"UEK CI Documentation\">\n    <meta name=\"author\" content=\"Viacheslav Babanin\">\n    <?=link_tag('img/afav.png', $rel=\"shortcut icon\", $type='')?>\n    <title>Exstract Transform Load</title>\n\n    <?=link_tag('css/bootstrap.min.css')?>\n    <?=link_tag('css/jquery-ui.min.css')?>\n    <link href='https://fonts.googleapis.com/css?family=Lato:400,700|Roboto+Slab:400,700|Inconsolata:400,700' rel='stylesheet' type='text/css'>\n    <link href='https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css' rel='stylesheet' type='text/css'>\n    <?=link_tag('css/theme.css')?>\n    <?=link_tag('css/theme_extra.css')?>\n    <?=link_tag('css/highlight.css')?>\n    <?=link_tag('css/uek.css')?>\n    <?=link_tag('css/jquery.json-viewer.css')?>\n    <?=link_tag('css/jquery-confirm.min.css')?>\n\n\n</head>\n<body class=\"wy-body-for-nav\" role=\"document\">\n<div class=\"wy-grid-for-nav\">\n\n\n\ntopbar.php\n - this file contains html code which is responsible for top-bar navigation menu.\n\n\n<section data-toggle=\"wy-nav-shift\" class=\"wy-nav-content-wrap\">\n    <div id=\"adminbar\">\n        <ul class=\"button-left\">\n            <li onclick=\"location.href='<?=base_url('home')?>';\"><i class=\"fa fa-home\"></i> Home</a></li>\n        </ul>\n        <ul class=\"button-left\">\n            <li onclick=\"location.href='<?=base_url('settings')?>';\"><i class=\"fa fa-cogs\"></i> Settings</a></li>\n        </ul>\n        <ul class=\"button-left\">\n            <li onclick=\"location.href='<?=base_url('docs')?>';\"><i class=\"fa fa-book\"></i> Documentation</a></li>\n        </ul>\n    </div>\n    <nav class=\"wy-nav-top\" role=\"navigation\" aria-label=\"top navigation\">\n        <i data-toggle=\"wy-nav-top\" class=\"fa fa-bars\"></i>\n        <a href=\".\">Admin Panel Centrum Informatyki</a>\n    </nav>\n    <div class=\"wy-nav-content\">\n        <div class=\"rst-content\">\n            <div role=\"main\">\n                <div class=\"section\">\n\n\n\nsidebar.php\n - this file contains html code which is responsible for side-bar module navigation menu.                  \n\n\n<nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side stickynav\">\n        <div class=\"wy-side-nav-search\">\n            <a href=\".\" class=\"icon icon-home\"> Extract Transform Load</a>\n        </div>\n        <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"main navigation\">\n            <ul class=\"<?=$current==='extract' ? 'current' : ''?>\">\n                <li class=\"toctree-l1 <?=$current==='extract' ? 'current' : ''?>\">\n                    <a class=\"<?=$current==='extract' ? 'current' : ''?>\" href=\"<?=base_url()?>extract\">Extract</a>\n                </li>\n            </ul>\n            <ul class=\"<?=$current==='transform' ? 'current' : ''?>\">\n                <li class=\"toctree-l1 <?=$current==='transform' ? 'current blue' : ''?>\">\n                    <a class=\"<?=$current==='transform' ? 'current blue' : ''?>\" href=\"<?=base_url()?>transform\">Transform</a>\n                </li></ul>\n            <ul class=\"<?=$current==='load' ? 'current' : ''?>\">\n                <li class=\"toctree-l1 <?=$current==='load' ? 'current green' : ''?>\">\n                    <a class=\"<?=$current==='load' ? 'current green' : ''?>\" href=\"<?=base_url()?>load\">Load</a>\n                </li></ul>\n            <ul class=\"<?=$current==='crudhome' ? 'current' : ''?>\">\n                <li class=\"toctree-l1 <?=$current==='crudhome' ? 'current' : ''?>\">\n                    <a class=\"<?=$current==='crudhome' ? 'current' : ''?>\" href=\"<?=base_url()?>crudhome\">Monitor DB</a>\n                    <ul class=\"current subnav\">\n                        <li class=\"toctree-l2 toc-item <?=$toccurrent==='mongo/products' ? 'toc-current' : ''?>\">\n                            <a href=\"<?php echo base_url();?>mongo/products\" title=\"Extract Mongo CRUD\">E: Mongo</a>\n                        </li>\n                        <li class=\"toctree-l2 toc-item <?=$toccurrent==='mongo/aggregated' ? 'toc-current' : ''?>\">\n                            <a href=\"<?php echo base_url();?>mongo/aggregated\" title=\"Transform Mongo CRUD\">T: Mongo</a>\n                        </li>\n                        <li class=\"toctree-l2 toc-item <?=$toccurrent==='sql/temp_products' ? 'toc-current' : ''?>\">\n                            <a href=\"<?php echo base_url();?>sql/temp_products\" title=\"Transform SQL CRUD\">T: SQL</a>\n                        </li>\n                        <li class=\"toctree-l2 toc-item <?=$toccurrent==='sql/products' ? 'toc-current' : ''?>\">\n                            <a href=\"<?php echo base_url();?>sql/products\" title=\"Load SQL CRUD\">L: SQL</a>\n                        </li>\n                    </ul>\n                </li></ul>\n\n        </div>\n    </nav>\n\n\n\nfooter.php\n - this file contains footer message as well as closing tags for elements and containers which were opened in upper templates.\n\n\n</div>\n</div>\n\n<footer>\n\n    <hr/>\n\n    <div role=\"contentinfo\">\n        <!-- Copyright etc -->\n\n        <p>\u00a9 2018 Viacheslav Babanin Uniwersytet Ekonomiczny w Krakowie</p>\n\n    </div>\n</footer>\n\n</div>\n</div>\n\n</section>\n</div>\n\n<div class=\"rst-versions\" role=\"note\" style=\"cursor: pointer\">\n    <span class=\"rst-current-version\" data-toggle=\"rst-current-version\">\n\n\n    </span>\n</div>\n\n\n\nscript.php\n - contains closing tags and javascript scripts. Detailed explanation is in \nFrontend\n chapter of this documentation\n\n\nPages\n\uf0c1\n\n\nThis category of views contains web-pages which are part of the application. The file structure is as follows:\n\n\n\n\npages\n\n\ncrud\n\n\ncrudhome.php\n\n\nmongocrud.php\n\n\nsqlcrud.php\n\n\n\n\n\n\nextract\n\n\nextract_app.php\n\n\nextract_result.php\n\n\n\n\n\n\nload\n\n\nload_app.php\n\n\nload_result.php\n\n\n\n\n\n\ntransform\n\n\ntransform_app.php\n\n\ntransform_result.php\n\n\n\n\n\n\nhome.php\n\n\nhome_result.php\n\n\nsettings.php\n\n\n\n\n\n\n\n\nGeneral structure of each page is that consists form one or more \n<div class=\"app\"></div>\n elements which represent application windows on white background.\n\n\nHome\n\uf0c1\n\n\nHome page consists of two html files: \nhome.php\n and \nhome_result.php\n.\n\n\n\n\nhome.php\n - contains application windows for ETL process.\n\n\n\nhome_result.php\n - displays ETL process report for the user. \n\n\n\n\n\nSettings\n\uf0c1\n\n\n\n\nsettings.php\n - file which contains html elements responsible for user interaction with current global application settings.\n\n\n\n\n\nExtract\n\uf0c1\n\n\nExtract module page is generated by two html files \nextract_app.php\n and \nextract_result.php\n.\n\n\n\n\nextract_app.php\n - displays Extract process configuration application window.\n\n\n\nextract_result.php\n - displays Extract report.\n\n\n\n\n\nTransform\n\uf0c1\n\n\nExtract module page is generated by two html files \nextract_app.php\n and \nextract_result.php\n.\n\n\n\n\ntransform_app.php\n - displays Transform process configuration application window.\n\n\n\ntransform_result.php\n - displays Extract report.\n\n\n\n\n\nLoad\n\uf0c1\n\n\nExtract module page is generated by two html files \nextract_app.php\n and \nextract_result.php\n.\n\n\n\n\nload_app.php\n - displays Extract process configuration application window.\n\n\n\nload_result.php\n - displays Extract report.\n\n\n\n\n\nCrud\n\uf0c1\n\n\nCrud module consists of 3 views:\n\n\n\n\ncrudhome.php\n - index page of a module which explains what kind of data is presented on subpages.\n\n\nmongocrud.php\n - dynamic view which presents content of MongoDB collection, both MongoDB Crud pages are generated using this view.\n\n\nsqlcrud.php\n - dynamic view which presents content of SQL table, both SQL Crud pages are generated using this view.\n\n\n\n\nErrors\n\uf0c1\n\n\nThis category of views consists of views which process and present user-friendly, human readable php errors.\n\n\nMost of them are part of CodeIgniter framework except one, which generates error message due to invalid module access:\n\n\n\n\nerror_wrongphase.php\n\n\n<div class=\"windows\">\n<div class='app'>\n\n    <div class=\"error\"><h1>MODULE ACCESS ERROR</h1>\n        <h4>Reason: </h4>\n        <p>\n            Trying to use incorrect module\n        </p>\n        <h4>Message:</h4>\n    <p>\n        You are trying to access module incompatible with application phase.\n    </p>\n    </div>\n    <span><b>Please visit compatible module:</b></span>\n    <ul>\n        <?php if ($phase == 'extract'):?>\n        <li><a href=\"<?=base_url()?>extract\">Extract - start ETL from here</a></li>\n        <?php elseif ($phase == 'transform'):?>\n            <li><a href=\"<?=base_url()?>transform\">Transform - continue ETL workflow</a></li>\n        <?php elseif ($phase == 'load'):?>\n            <li><a href=\"<?=base_url()?>load\">Load - finish ETL workflow</a></li>\n       <?php endif;?>\n\n    </ul>\n\n</div>\n\n\n\nThis view presents user with a message which differs according to current application page.",
            "title": "Views"
        },
        {
            "location": "/views/#application-views",
            "text": "Application views are grouped into 3 main categories:   Templates  Pages  Errors",
            "title": "Application Views"
        },
        {
            "location": "/views/#templates",
            "text": "This category of views are used to build page from structural parts.  It consists of 5 template parts:   meta.php  topbar.php  sidebar.php  footer.php  script.php   The body of application page hast to be placed between sidebar and footer element of the template.  meta.php  - this file contains header of the webpage and loads css files.  <?php\n\n?>\n<!DOCTYPE html>\n<!--[if IE 8]><html class=\"no-js lt-ie9\" lang=\"en\" > <![endif]-->\n<!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\" > <!--<![endif]-->\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"UEK CI Documentation\">\n    <meta name=\"author\" content=\"Viacheslav Babanin\">\n    <?=link_tag('img/afav.png', $rel=\"shortcut icon\", $type='')?>\n    <title>Exstract Transform Load</title>\n\n    <?=link_tag('css/bootstrap.min.css')?>\n    <?=link_tag('css/jquery-ui.min.css')?>\n    <link href='https://fonts.googleapis.com/css?family=Lato:400,700|Roboto+Slab:400,700|Inconsolata:400,700' rel='stylesheet' type='text/css'>\n    <link href='https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css' rel='stylesheet' type='text/css'>\n    <?=link_tag('css/theme.css')?>\n    <?=link_tag('css/theme_extra.css')?>\n    <?=link_tag('css/highlight.css')?>\n    <?=link_tag('css/uek.css')?>\n    <?=link_tag('css/jquery.json-viewer.css')?>\n    <?=link_tag('css/jquery-confirm.min.css')?>\n\n\n</head>\n<body class=\"wy-body-for-nav\" role=\"document\">\n<div class=\"wy-grid-for-nav\">  topbar.php  - this file contains html code which is responsible for top-bar navigation menu.  <section data-toggle=\"wy-nav-shift\" class=\"wy-nav-content-wrap\">\n    <div id=\"adminbar\">\n        <ul class=\"button-left\">\n            <li onclick=\"location.href='<?=base_url('home')?>';\"><i class=\"fa fa-home\"></i> Home</a></li>\n        </ul>\n        <ul class=\"button-left\">\n            <li onclick=\"location.href='<?=base_url('settings')?>';\"><i class=\"fa fa-cogs\"></i> Settings</a></li>\n        </ul>\n        <ul class=\"button-left\">\n            <li onclick=\"location.href='<?=base_url('docs')?>';\"><i class=\"fa fa-book\"></i> Documentation</a></li>\n        </ul>\n    </div>\n    <nav class=\"wy-nav-top\" role=\"navigation\" aria-label=\"top navigation\">\n        <i data-toggle=\"wy-nav-top\" class=\"fa fa-bars\"></i>\n        <a href=\".\">Admin Panel Centrum Informatyki</a>\n    </nav>\n    <div class=\"wy-nav-content\">\n        <div class=\"rst-content\">\n            <div role=\"main\">\n                <div class=\"section\">  sidebar.php  - this file contains html code which is responsible for side-bar module navigation menu.                    <nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side stickynav\">\n        <div class=\"wy-side-nav-search\">\n            <a href=\".\" class=\"icon icon-home\"> Extract Transform Load</a>\n        </div>\n        <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"main navigation\">\n            <ul class=\"<?=$current==='extract' ? 'current' : ''?>\">\n                <li class=\"toctree-l1 <?=$current==='extract' ? 'current' : ''?>\">\n                    <a class=\"<?=$current==='extract' ? 'current' : ''?>\" href=\"<?=base_url()?>extract\">Extract</a>\n                </li>\n            </ul>\n            <ul class=\"<?=$current==='transform' ? 'current' : ''?>\">\n                <li class=\"toctree-l1 <?=$current==='transform' ? 'current blue' : ''?>\">\n                    <a class=\"<?=$current==='transform' ? 'current blue' : ''?>\" href=\"<?=base_url()?>transform\">Transform</a>\n                </li></ul>\n            <ul class=\"<?=$current==='load' ? 'current' : ''?>\">\n                <li class=\"toctree-l1 <?=$current==='load' ? 'current green' : ''?>\">\n                    <a class=\"<?=$current==='load' ? 'current green' : ''?>\" href=\"<?=base_url()?>load\">Load</a>\n                </li></ul>\n            <ul class=\"<?=$current==='crudhome' ? 'current' : ''?>\">\n                <li class=\"toctree-l1 <?=$current==='crudhome' ? 'current' : ''?>\">\n                    <a class=\"<?=$current==='crudhome' ? 'current' : ''?>\" href=\"<?=base_url()?>crudhome\">Monitor DB</a>\n                    <ul class=\"current subnav\">\n                        <li class=\"toctree-l2 toc-item <?=$toccurrent==='mongo/products' ? 'toc-current' : ''?>\">\n                            <a href=\"<?php echo base_url();?>mongo/products\" title=\"Extract Mongo CRUD\">E: Mongo</a>\n                        </li>\n                        <li class=\"toctree-l2 toc-item <?=$toccurrent==='mongo/aggregated' ? 'toc-current' : ''?>\">\n                            <a href=\"<?php echo base_url();?>mongo/aggregated\" title=\"Transform Mongo CRUD\">T: Mongo</a>\n                        </li>\n                        <li class=\"toctree-l2 toc-item <?=$toccurrent==='sql/temp_products' ? 'toc-current' : ''?>\">\n                            <a href=\"<?php echo base_url();?>sql/temp_products\" title=\"Transform SQL CRUD\">T: SQL</a>\n                        </li>\n                        <li class=\"toctree-l2 toc-item <?=$toccurrent==='sql/products' ? 'toc-current' : ''?>\">\n                            <a href=\"<?php echo base_url();?>sql/products\" title=\"Load SQL CRUD\">L: SQL</a>\n                        </li>\n                    </ul>\n                </li></ul>\n\n        </div>\n    </nav>  footer.php  - this file contains footer message as well as closing tags for elements and containers which were opened in upper templates.  </div>\n</div>\n\n<footer>\n\n    <hr/>\n\n    <div role=\"contentinfo\">\n        <!-- Copyright etc -->\n\n        <p>\u00a9 2018 Viacheslav Babanin Uniwersytet Ekonomiczny w Krakowie</p>\n\n    </div>\n</footer>\n\n</div>\n</div>\n\n</section>\n</div>\n\n<div class=\"rst-versions\" role=\"note\" style=\"cursor: pointer\">\n    <span class=\"rst-current-version\" data-toggle=\"rst-current-version\">\n\n\n    </span>\n</div>  script.php  - contains closing tags and javascript scripts. Detailed explanation is in  Frontend  chapter of this documentation",
            "title": "Templates"
        },
        {
            "location": "/views/#pages",
            "text": "This category of views contains web-pages which are part of the application. The file structure is as follows:   pages  crud  crudhome.php  mongocrud.php  sqlcrud.php    extract  extract_app.php  extract_result.php    load  load_app.php  load_result.php    transform  transform_app.php  transform_result.php    home.php  home_result.php  settings.php     General structure of each page is that consists form one or more  <div class=\"app\"></div>  elements which represent application windows on white background.",
            "title": "Pages"
        },
        {
            "location": "/views/#home",
            "text": "Home page consists of two html files:  home.php  and  home_result.php .   home.php  - contains application windows for ETL process.  home_result.php  - displays ETL process report for the user.",
            "title": "Home"
        },
        {
            "location": "/views/#settings",
            "text": "settings.php  - file which contains html elements responsible for user interaction with current global application settings.",
            "title": "Settings"
        },
        {
            "location": "/views/#extract",
            "text": "Extract module page is generated by two html files  extract_app.php  and  extract_result.php .   extract_app.php  - displays Extract process configuration application window.  extract_result.php  - displays Extract report.",
            "title": "Extract"
        },
        {
            "location": "/views/#transform",
            "text": "Extract module page is generated by two html files  extract_app.php  and  extract_result.php .   transform_app.php  - displays Transform process configuration application window.  transform_result.php  - displays Extract report.",
            "title": "Transform"
        },
        {
            "location": "/views/#load",
            "text": "Extract module page is generated by two html files  extract_app.php  and  extract_result.php .   load_app.php  - displays Extract process configuration application window.  load_result.php  - displays Extract report.",
            "title": "Load"
        },
        {
            "location": "/views/#crud",
            "text": "Crud module consists of 3 views:   crudhome.php  - index page of a module which explains what kind of data is presented on subpages.  mongocrud.php  - dynamic view which presents content of MongoDB collection, both MongoDB Crud pages are generated using this view.  sqlcrud.php  - dynamic view which presents content of SQL table, both SQL Crud pages are generated using this view.",
            "title": "Crud"
        },
        {
            "location": "/views/#errors",
            "text": "This category of views consists of views which process and present user-friendly, human readable php errors.  Most of them are part of CodeIgniter framework except one, which generates error message due to invalid module access:   error_wrongphase.php  <div class=\"windows\">\n<div class='app'>\n\n    <div class=\"error\"><h1>MODULE ACCESS ERROR</h1>\n        <h4>Reason: </h4>\n        <p>\n            Trying to use incorrect module\n        </p>\n        <h4>Message:</h4>\n    <p>\n        You are trying to access module incompatible with application phase.\n    </p>\n    </div>\n    <span><b>Please visit compatible module:</b></span>\n    <ul>\n        <?php if ($phase == 'extract'):?>\n        <li><a href=\"<?=base_url()?>extract\">Extract - start ETL from here</a></li>\n        <?php elseif ($phase == 'transform'):?>\n            <li><a href=\"<?=base_url()?>transform\">Transform - continue ETL workflow</a></li>\n        <?php elseif ($phase == 'load'):?>\n            <li><a href=\"<?=base_url()?>load\">Load - finish ETL workflow</a></li>\n       <?php endif;?>\n\n    </ul>\n\n</div>  This view presents user with a message which differs according to current application page.",
            "title": "Errors"
        },
        {
            "location": "/libraries/",
            "text": "Libraries\n\uf0c1\n\n\n\n\nApplication makes use of 4 custom classes, which, in CodeIgniter framework terminology, are called libraries. \n\n\nAllegro Crawler\n\uf0c1\n\n\nClass AllegroCrawler\n\n\nParent Crawler class which is used to scrap data from Allegro.\n\n\nclass AllegroCrawler{\n    /**\n     * Object of type Symfony\\Domcrawler\\Crawler which hosts current crawler\n     * @var \\Symfony\\Component\\DomCrawler\\Crawler\n     */\n    protected $crawler;\n\n    /**\n     * AllegroCrawler constructor.\n     * @param $categoryURI - uri to be scrapped by crawler\n     */\n    public function __construct($categoryURI)\n    {\n        //Create new DOMDocument object which contains html not like string but like object\n        $dom = new DOMDocument('1.0');\n        //Load content from provided link to this object\n        @$dom->loadHTMLFile($categoryURI);\n\n        //Create crawler on this object and mark base url as allegro main url\n        $this->crawler = new \\Symfony\\Component\\DomCrawler\\Crawler($dom, 'https://allegro.pl/');\n    }\n}\n\n\n\nCategory Crawler\n\uf0c1\n\n\nClass CategoryCrawler\n\n\nCrawler which is used to scrap CATEGORY pages at allegro (class Worm is used to scrap product pages).\n\n\nclass CategoryCrawler extends AllegroCrawler\n{\n    /**\n     * This crawler object\n     * @var\n     */\n    protected $crawler;\n\n    /**\n     * CategoryCrawler constructor.\n     * @param array $category_uri_array - category link from which crawler has to scrap content, has to be an array due to framework limitations\n     */\n    public function __construct(array $category_uri_array)\n    {\n        //get first (and only) item of an array\n       $url =  $category_uri_array[0];\n       //Invoke parent constructor and create crawler on this link\n        parent::__construct($url);\n    }\n\n    /**\n     * Function which returns amount of pages from current category\n     * @return mixed\n     */\n    function getAmountOfPages()\n    {\n        //Get value from html element identified by [class=\"m-pagination__text\"] which hosts value of max pages\n        $numberOfPages = $this->crawler->filter('[class=\"m-pagination__text\"]')->text();\n        return $numberOfPages;\n    }\n\n\n    /**\n     * Function that collects links to products from current category page\n     * @return mixed - array of links\n     */\n    function getProductLinksFromPage()\n    {\n        //Extract Big div with items from page\n        $div = $this->crawler->filter('[data-box-name=\"items container\"]');\n        //Extract Headers from big div which contain links to items\n        $h2 = $div->filter('[class=\"_4462670  \"],[class=\"_4462670 _7b0067f \"]');\n        //Extract Links from inside headers\n        $anchors = $h2->filter('a');\n        //Extract final uri's from links and push them to $linksArray\n        $linksArray = $anchors->each(function (\\Symfony\\Component\\DomCrawler\\Crawler $node, $i) {\n            $url=getCleanUrl($node->link()->getUri());\n            return $url;\n        });\n        return $linksArray;\n    }\n\n}\n\n\n\nWorm\n\uf0c1\n\n\nClass Worm\n\n\nCrawler which is used to scrap PRODUCT pages at allegro (class CategoryCrawler is used to scrap category pages)\n\n\nclass Worm\n{\n    /**\n     * This crawler object\n     * @var \\Symfony\\Component\\DomCrawler\\Crawler\n     */\n    protected $crawler;\n\n    /**\n     * Worm constructor.\n     * Creates worm that scraps data from given itemURL\n     * @param $itemURL\n     */\n    public function __construct($itemURL)\n    {\n        $this->crawler= new \\Symfony\\Component\\DomCrawler\\Crawler($itemURL,'https://allegro.pl/');\n    }\n\n\n    /**\n     * Function that extracts data from allegro javascript and packs it to array\n     * @return mixed - associative array with data\n     */\n    public function getJson(){\n        //Extract <script> tag from allegro\n        $text = $this->crawler->filter('[data-box-name=\"summary\"]')->filter('script')->html();\n\n        //Cut out json string from <script> tag, trim and process it so it will look like valid json\n        $start = '\"primarySlot\":';\n        $end = '\"additionalServices\"';\n        $jsonstring = get_string_between($text,$start,$end);\n        $stripped = str_replace($jsonstring, \"{},\",$text);\n\n        //Further trim, process and decode html special character used for polish characters\n        $json = html_entity_decode(rtrim(strstr($stripped,\"{\\\"\"),\";\"));\n        return json_decode($json,true);\n    }\n\n}\n\n\n\nScraper\n\uf0c1\n\n\nClass Scraper\n\n\nClass which creates 'virtual' browsers which open pages and scrap data from them.\n\n\nclass Scraper\n{\n    /**\n     * Object of current browser client\n     * @var\n     */\n    private $client;\n\n    /**\n     * Array of scrapped data\n     * @var array\n     */\n    private $scraped = [];\n\n    /**\n     * Setter which allows to set current client\n     * @param Browser $client\n     */\n    public function setClient(Browser $client){\n        $this->client = $client;\n    }\n\n\n    /**\n     * Main scrape function which scraps provided url's in a multi-threading manner using a queue\n     * @param array $urls - array of urls to be scrapped\n     * @param $concurrencyLimit - queue limit\n     */\n    public function scrape(array $urls = [], $concurrencyLimit)\n    {\n        //Create new queue with provided concurency limit\n        $queue = new Clue\\React\\Mq\\Queue($concurrencyLimit, null, function ($url) {\n            //When client is in queue extract content from url\n            return $this->client->get($url);\n        });\n        $this->scraped = [];\n\n        foreach ($urls as $url) {\n            //Populate queue with links\n           $queue($url)->then(\n               //When queue processes link invoke next function\n                function (\\Psr\\Http\\Message\\ResponseInterface $response) {\n                    //Extract data from html and write result to scrapped array\n                    $this->scraped[] = $this->extractFromHtml((string) $response->getBody());\n                });\n        }\n    }\n\n    /**\n     * Function which is used to extract data from html document\n     * @param $html - html document\n     * @return mixed - array with data\n     */\n    public function extractFromHtml($html)\n    {\n        //Create new Worm and send it to html document\n        $crawler = new Worm($html);\n        $item = $crawler->getJson();\n       return $item;\n    }\n\n    /**\n     * Getter to return scrapped data\n     * @return array - scraped data\n     */\n    public function getData()\n    {\n        return $this->scraped;\n    }\n}\n\n\n\nTimer\n\uf0c1\n\n\nClass Timer\n\n\nClass which helps to measure time between processes.\n\n\nclass Timer\n{\n    /**\n     * Starting time\n     * @var\n     */\n    private $start_time;\n\n    /**\n     * Function which is used to start timer\n     */\n    public function start(){\n        $this->start_time=microtime(1);\n    }\n\n    /**\n     * Function which is used to stop timer\n     * @return string - time\n     */\n    public function stop(){\n        $end_time=microtime(1);\n        return getTime($this->start_time,$end_time);\n    }\n}",
            "title": "Custom Libraries"
        },
        {
            "location": "/libraries/#libraries",
            "text": "Application makes use of 4 custom classes, which, in CodeIgniter framework terminology, are called libraries.",
            "title": "Libraries"
        },
        {
            "location": "/libraries/#allegro-crawler",
            "text": "Class AllegroCrawler  Parent Crawler class which is used to scrap data from Allegro.  class AllegroCrawler{\n    /**\n     * Object of type Symfony\\Domcrawler\\Crawler which hosts current crawler\n     * @var \\Symfony\\Component\\DomCrawler\\Crawler\n     */\n    protected $crawler;\n\n    /**\n     * AllegroCrawler constructor.\n     * @param $categoryURI - uri to be scrapped by crawler\n     */\n    public function __construct($categoryURI)\n    {\n        //Create new DOMDocument object which contains html not like string but like object\n        $dom = new DOMDocument('1.0');\n        //Load content from provided link to this object\n        @$dom->loadHTMLFile($categoryURI);\n\n        //Create crawler on this object and mark base url as allegro main url\n        $this->crawler = new \\Symfony\\Component\\DomCrawler\\Crawler($dom, 'https://allegro.pl/');\n    }\n}",
            "title": "Allegro Crawler"
        },
        {
            "location": "/libraries/#category-crawler",
            "text": "Class CategoryCrawler  Crawler which is used to scrap CATEGORY pages at allegro (class Worm is used to scrap product pages).  class CategoryCrawler extends AllegroCrawler\n{\n    /**\n     * This crawler object\n     * @var\n     */\n    protected $crawler;\n\n    /**\n     * CategoryCrawler constructor.\n     * @param array $category_uri_array - category link from which crawler has to scrap content, has to be an array due to framework limitations\n     */\n    public function __construct(array $category_uri_array)\n    {\n        //get first (and only) item of an array\n       $url =  $category_uri_array[0];\n       //Invoke parent constructor and create crawler on this link\n        parent::__construct($url);\n    }\n\n    /**\n     * Function which returns amount of pages from current category\n     * @return mixed\n     */\n    function getAmountOfPages()\n    {\n        //Get value from html element identified by [class=\"m-pagination__text\"] which hosts value of max pages\n        $numberOfPages = $this->crawler->filter('[class=\"m-pagination__text\"]')->text();\n        return $numberOfPages;\n    }\n\n\n    /**\n     * Function that collects links to products from current category page\n     * @return mixed - array of links\n     */\n    function getProductLinksFromPage()\n    {\n        //Extract Big div with items from page\n        $div = $this->crawler->filter('[data-box-name=\"items container\"]');\n        //Extract Headers from big div which contain links to items\n        $h2 = $div->filter('[class=\"_4462670  \"],[class=\"_4462670 _7b0067f \"]');\n        //Extract Links from inside headers\n        $anchors = $h2->filter('a');\n        //Extract final uri's from links and push them to $linksArray\n        $linksArray = $anchors->each(function (\\Symfony\\Component\\DomCrawler\\Crawler $node, $i) {\n            $url=getCleanUrl($node->link()->getUri());\n            return $url;\n        });\n        return $linksArray;\n    }\n\n}",
            "title": "Category Crawler"
        },
        {
            "location": "/libraries/#worm",
            "text": "Class Worm  Crawler which is used to scrap PRODUCT pages at allegro (class CategoryCrawler is used to scrap category pages)  class Worm\n{\n    /**\n     * This crawler object\n     * @var \\Symfony\\Component\\DomCrawler\\Crawler\n     */\n    protected $crawler;\n\n    /**\n     * Worm constructor.\n     * Creates worm that scraps data from given itemURL\n     * @param $itemURL\n     */\n    public function __construct($itemURL)\n    {\n        $this->crawler= new \\Symfony\\Component\\DomCrawler\\Crawler($itemURL,'https://allegro.pl/');\n    }\n\n\n    /**\n     * Function that extracts data from allegro javascript and packs it to array\n     * @return mixed - associative array with data\n     */\n    public function getJson(){\n        //Extract <script> tag from allegro\n        $text = $this->crawler->filter('[data-box-name=\"summary\"]')->filter('script')->html();\n\n        //Cut out json string from <script> tag, trim and process it so it will look like valid json\n        $start = '\"primarySlot\":';\n        $end = '\"additionalServices\"';\n        $jsonstring = get_string_between($text,$start,$end);\n        $stripped = str_replace($jsonstring, \"{},\",$text);\n\n        //Further trim, process and decode html special character used for polish characters\n        $json = html_entity_decode(rtrim(strstr($stripped,\"{\\\"\"),\";\"));\n        return json_decode($json,true);\n    }\n\n}",
            "title": "Worm"
        },
        {
            "location": "/libraries/#scraper",
            "text": "Class Scraper  Class which creates 'virtual' browsers which open pages and scrap data from them.  class Scraper\n{\n    /**\n     * Object of current browser client\n     * @var\n     */\n    private $client;\n\n    /**\n     * Array of scrapped data\n     * @var array\n     */\n    private $scraped = [];\n\n    /**\n     * Setter which allows to set current client\n     * @param Browser $client\n     */\n    public function setClient(Browser $client){\n        $this->client = $client;\n    }\n\n\n    /**\n     * Main scrape function which scraps provided url's in a multi-threading manner using a queue\n     * @param array $urls - array of urls to be scrapped\n     * @param $concurrencyLimit - queue limit\n     */\n    public function scrape(array $urls = [], $concurrencyLimit)\n    {\n        //Create new queue with provided concurency limit\n        $queue = new Clue\\React\\Mq\\Queue($concurrencyLimit, null, function ($url) {\n            //When client is in queue extract content from url\n            return $this->client->get($url);\n        });\n        $this->scraped = [];\n\n        foreach ($urls as $url) {\n            //Populate queue with links\n           $queue($url)->then(\n               //When queue processes link invoke next function\n                function (\\Psr\\Http\\Message\\ResponseInterface $response) {\n                    //Extract data from html and write result to scrapped array\n                    $this->scraped[] = $this->extractFromHtml((string) $response->getBody());\n                });\n        }\n    }\n\n    /**\n     * Function which is used to extract data from html document\n     * @param $html - html document\n     * @return mixed - array with data\n     */\n    public function extractFromHtml($html)\n    {\n        //Create new Worm and send it to html document\n        $crawler = new Worm($html);\n        $item = $crawler->getJson();\n       return $item;\n    }\n\n    /**\n     * Getter to return scrapped data\n     * @return array - scraped data\n     */\n    public function getData()\n    {\n        return $this->scraped;\n    }\n}",
            "title": "Scraper"
        },
        {
            "location": "/libraries/#timer",
            "text": "Class Timer  Class which helps to measure time between processes.  class Timer\n{\n    /**\n     * Starting time\n     * @var\n     */\n    private $start_time;\n\n    /**\n     * Function which is used to start timer\n     */\n    public function start(){\n        $this->start_time=microtime(1);\n    }\n\n    /**\n     * Function which is used to stop timer\n     * @return string - time\n     */\n    public function stop(){\n        $end_time=microtime(1);\n        return getTime($this->start_time,$end_time);\n    }\n}",
            "title": "Timer"
        },
        {
            "location": "/helpers/",
            "text": "Helpers\n\uf0c1\n\n\nHelpers are files with independent functions which are used in models or controllers to simplify certain tasks.\n\n\nExtract Helper\n\uf0c1\n\n\nExtract helper file contains function which are used mainly in \nExtract_model\n.\n\n\nIt contains following functions:\n\n\nFunction which recursively converts multidimensional array to one-dimensional array for ease of iteration\n\n\nif (!function_exists('toSingleArray')) {\n    /**\n     * \n     * @param $arr - input multidimensional array\n     * @return array - output one-dimensional array\n     */\n    function toSingleArray($arr)\n    {\n        foreach ($arr as $key) {\n            if (is_array($key)) {\n                $arr1 = toSingleArray($key);\n                foreach ($arr1 as $k) {\n                    $new_arr[] = $k;\n                }\n            } else {\n                $new_arr[] = $key;\n            }\n        }\n        return $new_arr;\n    }\n}\n\n\n\nStrip uri from redirects and any parameters\n\n\nif (!function_exists('getCleanUrl')) {\n    /**\n     * \n     * @param $uri - input dirty uri\n     * @return bool|string - clean uri or error\n     */\n    function getCleanUrl($uri)\n    {\n        if (strpos($uri, '&redirect=') !== false) {\n            $url = get_string_between($uri, 'redirect=', '?');\n        } else {\n            $url = $uri;\n        }\n        return $url;\n    }\n}\n\n\n\nFunction which returns substring located between two other substrings\n\n\nif (!function_exists('get_string_between')) {\n    /**\n     * \n     * @param $string - input string\n     * @param $start - start substring\n     * @param $end - end substring\n     * @return bool|string - cut substring or error\n     */\n    function get_string_between($string, $start, $end)\n    {\n        $string = ' ' . $string;\n        $ini = strpos($string, $start);\n        if ($ini == 0) return '';\n        $ini += strlen($start);\n        $len = strpos($string, $end, $ini) - $ini;\n        return substr($string, $ini, $len);\n    }\n}\n\n\n\nCuts and removes substring between two other substrings\n\n\nif (!function_exists('delete_all_between')) {\n    /**\n     * \n     * @param $string - input string\n     * @param $beginning - start substring\n     * @param $end - end substring\n     * @return mixed - transformed input substring\n     */\n    function delete_all_between($string, $beginning, $end)\n    {\n        $beginningPos = strpos($string, $beginning);\n        $endPos = strpos($string, $end);\n        if ($beginningPos === false || $endPos === false) {\n            return $string;\n        }\n\n        $textToDelete = substr($string, $beginningPos, ($endPos + strlen($end)) - $beginningPos);\n\n        return delete_all_between($beginning, $end, str_replace($textToDelete, '', $string)); // recursion to ensure all occurrences are replaced\n    }\n}\n\n\n\nFunction which returns time between two microtimes in seconds or minutes   \n\n\nif (!function_exists('getTime')) {\n    /**\n     *\n     * if it is less than 60, otherwise in minutes and seconds\n     * @param $start_time\n     * @param $end_time\n     * @return string\n     */\n    function getTime($start_time, $end_time)\n    {\n        $duration = $end_time-$start_time;\n\n        if ($duration < 60)\n           return $duration;\n        else {\n            $min = (int)($duration / 60);\n            $sec = $duration % 60;\n           return \"$min min $sec s\";\n        }\n    }\n\n}\n\n\n\nTransform Helper\n\uf0c1\n\n\nTransform helper file contains function which are used mainly in \nTransform_model\n.\n\n\nIt contains following functions:\n\n\nFunction that converts boolean values to string values\n\n\nif (!function_exists('convertBoolean')) {\n    /**\n     * \n     * @param $attribute - input value, boolean or NULL\n     * @return string - string \"TRUE\", \"FALSE\", or \"NULL\"\n     */\n    function convertBoolean($attribute){\n        if($attribute==='NULL'){\n            return 'NULL';\n        }\n        if($attribute === true){\n            return \"TRUE\";\n        }else{\n            return \"FALSE\";\n        }\n    }\n}\n\n\n\nFunction which helps to retrieve value of an attribute and strips illegal characters in strings, if it is NULL it returns string \"NULL\"    \n\n\nif (!function_exists('getAttributeOrNull')) {\n    /**\n     * \n     * @param $attribute - name of an attribute\n     * @return mixed|string - attribute or null\n     */\n    function getAttributeOrNull($attribute){\n        $value =  isset($attribute) ? $attribute : 'NULL';\n        //Add single quotes around values which are of a string type or an empty string\n        if($value!=='NULL'&&is_string($value)){\n            //replace single quotes with double quotes inside strings\n            $value = str_replace('\\'','\"',$value);\n            $value = '\\''.$value.'\\'';\n\n        }\n        return $value;\n    }\n\n}\n\n\n\nFunction which helps to generate checkboxes for views\n\n\nif (!function_exists('generateCheckboxes')) {\n    /**\n     * \n     * @return array of checkboxes\n     */\n    function generateCheckboxes(){\n    //value has to be like in mongo collection\n        $checkboxes= [\n            [\n            'value'=>'offerTitle.title','id'=>'title_chb','label'=>'Title'\n        ],[\n                'value'=>'price.priceInteger','id'=>'price_chb','label'=>'Price'\n            ],[\n                'value'=>'offerTitle.sellerName','id'=>'seller_chb','label'=>'Seller'\n            ],[\n                'value'=>'offerTitle.sellerListingUrl','id'=>'sellerlink_chb','label'=>'Seller link'\n            ],[\n                'value'=>'coins.quantityWithLabel','id'=>'coins_chb','label'=>'Coins'\n            ],[\n                'value'=>'notifyAndWatch.quantity','id'=>'amount_chb','label'=>'Amount'\n            ],[\n                'value'=>'schema.description','id'=>'description_chb','label'=>'Description'\n            ],[\n                'value'=>'offerTitle.superSellerActive','id'=>'superstatus_chb','label'=>'Super status'\n            ],[\n                'value'=>'schema.itemCondition','id'=>'condition_chb','label'=>'Condition'\n            ],[\n                'value'=>'biddingSection.endingDate','id'=>'enddate_chb','label'=>'End date'\n            ],[\n                'value'=>'biddingSection.nextPrice','id'=>'nextprice_chb','label'=>'Next price'\n            ],[\n                'value'=>'popularity.label','id'=>'popularity_chb','label'=>'Popularity'\n            ],[\n                'value'=>'price.installments.quantity','id'=>'installments_chb','label'=>'Installments qty'\n            ],[\n                'value'=>'price.installments.free','id'=>'insttype_chb','label'=>'Inst type'\n            ],[\n                'value'=>'price.installments.price','id'=>'qtyprice_chb','label'=>'Inst price'\n            ]\n\n        ];\n        return $checkboxes;\n\n    }\n\n}\n\n\n\nCRUD Helper\n\uf0c1\n\n\nCRUD helper file contains function which are used mainly in \nCrud_model\n and \nEtl\n controller.\n\n\nIt contains following functions:\n\n\nFunction which helps to validate sql string.\n\n\nif (!function_exists('validateSql')) {\n    /**\n     * \n     * @param $string - input string\n     * @param int $limit - limit to sql query\n     * @return mixed|string - transformed string\n     */\n    function validateSql($string, $limit = 100){\n        //Convert to lower case\n        $sqlstring = strtolower($string);\n        //Replace any occurrence of semicolon\n        $sqlstring = str_replace(';','',$sqlstring);\n        //If there was no limit specified add default limit\n        if(strpos($sqlstring,'limit')===FALSE){\n            $sqlstring = $sqlstring.' limit '.$limit;\n        }\n        return $sqlstring;\n    }\n\n}\n\n\n\nFunction which helps to determine database type in case that mongo and mysql has table\\collection with same name\n\n\nif (!function_exists('getDbType')) {\n\n    /**\n     * \n     * @param $string - name of data structure\n     * @return string - type of database\n     */\n    function getDbType($string){\n        if($string=='temp_products' || $string=='sql_products'){\n            return 'sql';\n        }else{\n            //If name of data_structure is not one of reserved sql table names then it is mongo\n            return 'mongo';\n        }\n    }\n\n}",
            "title": "Helper functions"
        },
        {
            "location": "/helpers/#helpers",
            "text": "Helpers are files with independent functions which are used in models or controllers to simplify certain tasks.",
            "title": "Helpers"
        },
        {
            "location": "/helpers/#extract-helper",
            "text": "Extract helper file contains function which are used mainly in  Extract_model .  It contains following functions:  Function which recursively converts multidimensional array to one-dimensional array for ease of iteration  if (!function_exists('toSingleArray')) {\n    /**\n     * \n     * @param $arr - input multidimensional array\n     * @return array - output one-dimensional array\n     */\n    function toSingleArray($arr)\n    {\n        foreach ($arr as $key) {\n            if (is_array($key)) {\n                $arr1 = toSingleArray($key);\n                foreach ($arr1 as $k) {\n                    $new_arr[] = $k;\n                }\n            } else {\n                $new_arr[] = $key;\n            }\n        }\n        return $new_arr;\n    }\n}  Strip uri from redirects and any parameters  if (!function_exists('getCleanUrl')) {\n    /**\n     * \n     * @param $uri - input dirty uri\n     * @return bool|string - clean uri or error\n     */\n    function getCleanUrl($uri)\n    {\n        if (strpos($uri, '&redirect=') !== false) {\n            $url = get_string_between($uri, 'redirect=', '?');\n        } else {\n            $url = $uri;\n        }\n        return $url;\n    }\n}  Function which returns substring located between two other substrings  if (!function_exists('get_string_between')) {\n    /**\n     * \n     * @param $string - input string\n     * @param $start - start substring\n     * @param $end - end substring\n     * @return bool|string - cut substring or error\n     */\n    function get_string_between($string, $start, $end)\n    {\n        $string = ' ' . $string;\n        $ini = strpos($string, $start);\n        if ($ini == 0) return '';\n        $ini += strlen($start);\n        $len = strpos($string, $end, $ini) - $ini;\n        return substr($string, $ini, $len);\n    }\n}  Cuts and removes substring between two other substrings  if (!function_exists('delete_all_between')) {\n    /**\n     * \n     * @param $string - input string\n     * @param $beginning - start substring\n     * @param $end - end substring\n     * @return mixed - transformed input substring\n     */\n    function delete_all_between($string, $beginning, $end)\n    {\n        $beginningPos = strpos($string, $beginning);\n        $endPos = strpos($string, $end);\n        if ($beginningPos === false || $endPos === false) {\n            return $string;\n        }\n\n        $textToDelete = substr($string, $beginningPos, ($endPos + strlen($end)) - $beginningPos);\n\n        return delete_all_between($beginning, $end, str_replace($textToDelete, '', $string)); // recursion to ensure all occurrences are replaced\n    }\n}  Function which returns time between two microtimes in seconds or minutes     if (!function_exists('getTime')) {\n    /**\n     *\n     * if it is less than 60, otherwise in minutes and seconds\n     * @param $start_time\n     * @param $end_time\n     * @return string\n     */\n    function getTime($start_time, $end_time)\n    {\n        $duration = $end_time-$start_time;\n\n        if ($duration < 60)\n           return $duration;\n        else {\n            $min = (int)($duration / 60);\n            $sec = $duration % 60;\n           return \"$min min $sec s\";\n        }\n    }\n\n}",
            "title": "Extract Helper"
        },
        {
            "location": "/helpers/#transform-helper",
            "text": "Transform helper file contains function which are used mainly in  Transform_model .  It contains following functions:  Function that converts boolean values to string values  if (!function_exists('convertBoolean')) {\n    /**\n     * \n     * @param $attribute - input value, boolean or NULL\n     * @return string - string \"TRUE\", \"FALSE\", or \"NULL\"\n     */\n    function convertBoolean($attribute){\n        if($attribute==='NULL'){\n            return 'NULL';\n        }\n        if($attribute === true){\n            return \"TRUE\";\n        }else{\n            return \"FALSE\";\n        }\n    }\n}  Function which helps to retrieve value of an attribute and strips illegal characters in strings, if it is NULL it returns string \"NULL\"      if (!function_exists('getAttributeOrNull')) {\n    /**\n     * \n     * @param $attribute - name of an attribute\n     * @return mixed|string - attribute or null\n     */\n    function getAttributeOrNull($attribute){\n        $value =  isset($attribute) ? $attribute : 'NULL';\n        //Add single quotes around values which are of a string type or an empty string\n        if($value!=='NULL'&&is_string($value)){\n            //replace single quotes with double quotes inside strings\n            $value = str_replace('\\'','\"',$value);\n            $value = '\\''.$value.'\\'';\n\n        }\n        return $value;\n    }\n\n}  Function which helps to generate checkboxes for views  if (!function_exists('generateCheckboxes')) {\n    /**\n     * \n     * @return array of checkboxes\n     */\n    function generateCheckboxes(){\n    //value has to be like in mongo collection\n        $checkboxes= [\n            [\n            'value'=>'offerTitle.title','id'=>'title_chb','label'=>'Title'\n        ],[\n                'value'=>'price.priceInteger','id'=>'price_chb','label'=>'Price'\n            ],[\n                'value'=>'offerTitle.sellerName','id'=>'seller_chb','label'=>'Seller'\n            ],[\n                'value'=>'offerTitle.sellerListingUrl','id'=>'sellerlink_chb','label'=>'Seller link'\n            ],[\n                'value'=>'coins.quantityWithLabel','id'=>'coins_chb','label'=>'Coins'\n            ],[\n                'value'=>'notifyAndWatch.quantity','id'=>'amount_chb','label'=>'Amount'\n            ],[\n                'value'=>'schema.description','id'=>'description_chb','label'=>'Description'\n            ],[\n                'value'=>'offerTitle.superSellerActive','id'=>'superstatus_chb','label'=>'Super status'\n            ],[\n                'value'=>'schema.itemCondition','id'=>'condition_chb','label'=>'Condition'\n            ],[\n                'value'=>'biddingSection.endingDate','id'=>'enddate_chb','label'=>'End date'\n            ],[\n                'value'=>'biddingSection.nextPrice','id'=>'nextprice_chb','label'=>'Next price'\n            ],[\n                'value'=>'popularity.label','id'=>'popularity_chb','label'=>'Popularity'\n            ],[\n                'value'=>'price.installments.quantity','id'=>'installments_chb','label'=>'Installments qty'\n            ],[\n                'value'=>'price.installments.free','id'=>'insttype_chb','label'=>'Inst type'\n            ],[\n                'value'=>'price.installments.price','id'=>'qtyprice_chb','label'=>'Inst price'\n            ]\n\n        ];\n        return $checkboxes;\n\n    }\n\n}",
            "title": "Transform Helper"
        },
        {
            "location": "/helpers/#crud-helper",
            "text": "CRUD helper file contains function which are used mainly in  Crud_model  and  Etl  controller.  It contains following functions:  Function which helps to validate sql string.  if (!function_exists('validateSql')) {\n    /**\n     * \n     * @param $string - input string\n     * @param int $limit - limit to sql query\n     * @return mixed|string - transformed string\n     */\n    function validateSql($string, $limit = 100){\n        //Convert to lower case\n        $sqlstring = strtolower($string);\n        //Replace any occurrence of semicolon\n        $sqlstring = str_replace(';','',$sqlstring);\n        //If there was no limit specified add default limit\n        if(strpos($sqlstring,'limit')===FALSE){\n            $sqlstring = $sqlstring.' limit '.$limit;\n        }\n        return $sqlstring;\n    }\n\n}  Function which helps to determine database type in case that mongo and mysql has table\\collection with same name  if (!function_exists('getDbType')) {\n\n    /**\n     * \n     * @param $string - name of data structure\n     * @return string - type of database\n     */\n    function getDbType($string){\n        if($string=='temp_products' || $string=='sql_products'){\n            return 'sql';\n        }else{\n            //If name of data_structure is not one of reserved sql table names then it is mongo\n            return 'mongo';\n        }\n    }\n\n}",
            "title": "CRUD Helper"
        },
        {
            "location": "/frontend/",
            "text": "Frontend Logic\n\uf0c1\n\n\nApplication frontend logic is written partially in JavaScript and in Php.\n\n\nJavascript plays supportive role and is mainly used for data presentation.\n\n\nJavaScript\n\uf0c1\n\n\nFunction that processes user confirmation for deleting everything from given database.\n\n\nvar askConfirmation = true;\n\n $(\"#form_delete\").submit(function(e) {\n            if (askConfirmation) {\n                e.preventDefault(); // dont submit the form, ask for confirmation first.\n                $.confirm({\n                    title: \"Erase <b><?=isset($content['table_name']) ? $content['table_name'] : \"\"?></b>\",\n                    content: \"Are you sure you want to delete all records from <span style=\\\"color: red\\\"><?=isset($content['table_name']) ? $content['table_name'] : \"\"?></span> ?\",\n                    buttons: {\n                        confirm: {\n                            text: \"Delete\",\n                            btnClass: 'btn-danger',\n                            action: function() {\n                                askConfirmation = false; // done asking confirmation, now submit the form\n                                $('#delete').click();\n                            }\n                        },\n                        cancel: {\n                            text: \"Cancel\",\n                            btnClass: 'btn-default'\n                        }\n                    }\n                });\n            }\n        });\n\n\n\nFunction that allows to submit sql query or mongo filter on \nEnter\n keypress.\n\n\n$(\"#query\").keypress(function (e) {\n            if (e.which == 13 && !e.shiftKey) {\n                $(\"#submit\").click();\n                e.preventDefault();\n                return false;\n            }\n        });\n\n\n\nFunction that handles 'Check all' checkbox behavior.\n\n\n$(\"#checkall_chb\").change(function () {\n            if (this.checked) {\n                $(\"[name='fields[]']\").each(function () {\n                    this.checked = true;\n                });\n            } else {\n                $(\"[name='fields[]']\").each(function () {\n                    this.checked = false;\n                });\n            }\n        });\n\n\n\nFunction which is used to generate MongoDB crud interface.\n\n\n<?php\n        if ($toccurrent == 'mongo/products' || $toccurrent == 'mongo/aggregated') {\n                foreach ($content['documents'] as $id => $document) {\n                    echo '$(\\'#' . $id . '\\').jsonViewer(' . $document . ', {collapsed: true});';\n                }\n        }\n?>\n\n\n\nLibraries\n\uf0c1\n\n\nFollowing libraries are used to support frontend of the application.\n\n\n<?= script_tag('js/modernizr-2.8.3.min.js') ?>\n<?= script_tag('js/highlight.pack.js') ?>    \n<?= script_tag('js/jquery-3.3.1.min.js') ?>\n<?= script_tag('js/jquery.json-viewer.js') ?>\n<?= script_tag('js/bootstrap.min.js') ?>\n<?= script_tag('js/jquery-ui.min.js') ?>\n<?= script_tag('js/jquery-confirm.min.js') ?>",
            "title": "Frontend Logic"
        },
        {
            "location": "/frontend/#frontend-logic",
            "text": "Application frontend logic is written partially in JavaScript and in Php.  Javascript plays supportive role and is mainly used for data presentation.",
            "title": "Frontend Logic"
        },
        {
            "location": "/frontend/#javascript",
            "text": "Function that processes user confirmation for deleting everything from given database.  var askConfirmation = true;\n\n $(\"#form_delete\").submit(function(e) {\n            if (askConfirmation) {\n                e.preventDefault(); // dont submit the form, ask for confirmation first.\n                $.confirm({\n                    title: \"Erase <b><?=isset($content['table_name']) ? $content['table_name'] : \"\"?></b>\",\n                    content: \"Are you sure you want to delete all records from <span style=\\\"color: red\\\"><?=isset($content['table_name']) ? $content['table_name'] : \"\"?></span> ?\",\n                    buttons: {\n                        confirm: {\n                            text: \"Delete\",\n                            btnClass: 'btn-danger',\n                            action: function() {\n                                askConfirmation = false; // done asking confirmation, now submit the form\n                                $('#delete').click();\n                            }\n                        },\n                        cancel: {\n                            text: \"Cancel\",\n                            btnClass: 'btn-default'\n                        }\n                    }\n                });\n            }\n        });  Function that allows to submit sql query or mongo filter on  Enter  keypress.  $(\"#query\").keypress(function (e) {\n            if (e.which == 13 && !e.shiftKey) {\n                $(\"#submit\").click();\n                e.preventDefault();\n                return false;\n            }\n        });  Function that handles 'Check all' checkbox behavior.  $(\"#checkall_chb\").change(function () {\n            if (this.checked) {\n                $(\"[name='fields[]']\").each(function () {\n                    this.checked = true;\n                });\n            } else {\n                $(\"[name='fields[]']\").each(function () {\n                    this.checked = false;\n                });\n            }\n        });  Function which is used to generate MongoDB crud interface.  <?php\n        if ($toccurrent == 'mongo/products' || $toccurrent == 'mongo/aggregated') {\n                foreach ($content['documents'] as $id => $document) {\n                    echo '$(\\'#' . $id . '\\').jsonViewer(' . $document . ', {collapsed: true});';\n                }\n        }\n?>",
            "title": "JavaScript"
        },
        {
            "location": "/frontend/#libraries",
            "text": "Following libraries are used to support frontend of the application.  <?= script_tag('js/modernizr-2.8.3.min.js') ?>\n<?= script_tag('js/highlight.pack.js') ?>    \n<?= script_tag('js/jquery-3.3.1.min.js') ?>\n<?= script_tag('js/jquery.json-viewer.js') ?>\n<?= script_tag('js/bootstrap.min.js') ?>\n<?= script_tag('js/jquery-ui.min.js') ?>\n<?= script_tag('js/jquery-confirm.min.js') ?>",
            "title": "Libraries"
        },
        {
            "location": "/stylesheets/",
            "text": "Stylesheets\n\uf0c1\n\n\nApplication uses css libraries as well as custom css.\n\n\nCore library which is used is \nBootstrap v3.3.7 JS CSS HTML Framework\n\n\nCustom css is created with the help of \nSASS/SCSS Extension\n\n\nTechnology Used\n\uf0c1\n\n\nCss was written and build from \nSASS/SCSS Extension\n with \n\nScoutAPP v2.12.12 SASS/SCSS processor\n.\n\n\nLibraries\n\uf0c1\n\n\nFollowing styling libraries had been used:\n\n\n\n\nBootstrap JS CSS HTML Framework\n\n\nJquery-ui\n\n\nJquery Json-Viewer supportive library\n\n\nCustom modified MkDocs theme library\n\n\n\n\nCustom CSS\n\uf0c1\n\n\nCustom CSS is written using SCSS extension and consists of two files.\n\n\n_vars.css\n - contains various variables and mixins which are used in main css file.\n\n\n/*Colors*/\n$uek-red: #8d0126;\n$light-red: #dd4814;\n$background: #f1f1f1;\n$uek-blue: #27018d;\n$uek-green: #004f48;\n/*Mixins*/\n@mixin transform($property){\n  -moz-transform:$property;\n  -webkit-transform:$property;\n  transform:$property;\n}\n/*Extend/Inheritance*/\n%uek-shadow{\n  text-shadow: 1px 1px 3px $uek-red;\n}\n\n\n\nuek.css\n - main css file which styles the entire application.\n\n\n@import 'vars';\n/*Left top colored block*/\n.wy-side-nav-search{\n    text-shadow: 2px 2px 8px #000000;\n    background:transparent url(../img/applogo.png) no-repeat left;\n    background-color:white;\n    height:150px;\n    width: 150px;\n}\n\na.icon,a.icon-home{\n    visibility:hidden;\n}\n/*Icon left to title*/\n.fa-home:before, .icon-home:before {\n    content: \"\uf015\";\n}\n.wy-nav-top{\n    margin-top:30px;\n    background-color: $light-red;\n    text-shadow: 2px 2px 8px #000000;\n}\n/*Left bottom line*/\n.rst-versions{\n    border-top:solid 10px #f0f0f0;\n}\n/*Links*/\na{\n    color: $light-red;\n}\n\n#logged_as{\n\n  float: right !important;\n  font-size: 13px;\n  color: #fff;\n  text-shadow: 2px 2px 8px #000000;\n  margin-right:20px;\n\n  a:visited{\n    color: $light-red;\n  }\n  a:hover{\n    color: red;\n    @extend %uek-shadow;\n  }\n}\n\n/*Admin bar*/\n#adminbar{\n    direction: ltr;\n    color: #ccc;\n    font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;\n    height: 32px;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    min-width: 600px;\n    z-index: 99999;\n    background: #484141;\n}\n\n.wy-nav-side{\n    margin-top: 32px;\n    background-color: #484141;\n}\n.wy-nav-content{\n    padding: 3.618em 3.236em;\n    background-color:$background;\n    max-width: 2000px;\n}\n.windows{\n    display:inline-block;\n}\n/*Errors block*/\n.errors{\n    display:inline-block;\n    border: 1px solid #800000;\n    background-color: #F1EBE4;\n    height: 200px;\n    width: 380px;\n    position: relative;\n    top: 20px;\n    margin-left: 60px;\n\n  h2{\n    //background: url(../img/info4.png) no-repeat scroll 10px 2px #006b80c9;\n    background: #006B80 url(../img/info4.png) no-repeat scroll 10px 2px;\n    color: #FFFFFF;\n    text-align: center;\n    font-size: 24px;\n    margin-top: 0;\n    padding: 5px;\n    text-shadow: 2px 2px 0px #000000;\n  }\n}\n\n#err_list{\n    padding:20px;\n}\n\n/*Buttons*/\n#adminbar ul{\n    float:left;\n    top:0;\n    line-height: 32px;\n    font-weight: 500;\n}\n\n.button-left{\n  li{\n    padding-left:10px;\n    padding-right:10px;\n    cursor: pointer;\n    text-align:center;\n  }\n  li:hover{\n    background: #584f4f;\n    @extend %uek-shadow;\n  }\n  li:active{\n    background: black;\n    @extend %uek-shadow;\n  }\n}\n\n/*Sidebar*/\n/*Buttons*/\n.wy-menu-vertical{\n\n  li.current>a, li.current>a:hover{\n    border-top:1px solid $uek-red;\n    background-color: $uek-red;\n    color: white;\n    text-shadow: 1px 1px 2px #000000;\n    border-bottom:1px solid $uek-red;\n    border-right:black solid 1px;\n    position:relative;\n  }\n\n    li.toc-current{\n        background: #d8d7d7;\n    }\n    /*Classes to color buttons */\n    li.blue>a, li.blue>a:hover{\n        border-top:1px solid $uek-blue;\n        background-color: $uek-blue;\n        border-bottom:1px solid $uek-blue;\n\n    }\n    li.green>a, li.green>a:hover{\n        border-top:1px solid $uek-green;\n        background-color: $uek-green;\n        border-bottom:1px solid $uek-green;\n\n    }\n\n  /*arrow on lists*/\n  li.current>a:after{\n    content:'';\n    width:15px;\n    height:15px;\n    background:$background;\n    position:absolute;\n    @include transform(rotate(45deg));\n    top:27%;\n    left:142px;\n    border-left:black solid 1px;\n    border-bottom:black solid 1px;\n  }\n\n  li :active{\n    background-color: black;\n  }\n  li.on a:hover span.toctree-expand, .wy-menu-vertical li.current>a:hover span.toctree-expand{\n    color:white;\n  }\n  li.on a span.toctree-expand, .wy-menu-vertical li.current>a span.toctree-expand{\n    color:white;\n  }\n}\n\n/*Whole panel*/\n/*Change sidebar width*/\n.wy-nav-side, .rst-versions, .wy-menu-vertical{\n    width:150px;\n}\n\n.wy-nav-content-wrap{ /*Content block*/\n    margin-left: 150px;\n    background-color:$background;\n}\n.wy-body-for-nav{\n    background-size: 150px 1px;\n}\n\n\n/*Search app*/\n.headerlink{\n    visibility:hidden;\n}\n.input-group{\n    width:100%;\n}\n/*Remove Bootstrap blue outline*/\n.form-control:focus{\n    border-color: #cccccc;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n}\n/*Application div*/\n.app{\n    display: block;\n    margin: 16px;\n    padding: 23px;\n    border: 1px solid #e5e5e5;\n    box-shadow: 0 1px 1px rgba(0,0,0,.04);\n    background: #fff;\n  h1{\n    font-size:20px;\n  }\n  hr{\n    margin:0;\n  }\n}\n/*Table*/\ntable td{\n    padding: 10px 10px 0 10px;\n}\n.pcont{\n    margin-bottom:10px;\n}\n.tdbutton{\n    padding:0;\n}\nth {\n    text-align:center;\n}\n.invisible{\n    display:none;\n}\n.checkbox{\n    display:inline-block;\n    margin-right: 10px;\n}\n\n//Bootstrap overwrites\n.row{\n    margin-bottom: 5px;\n}\n.col-centered{\n    float: none;\n    margin: 0 auto;\n}\n.table-responsive{\n    max-height: 500px;\n    overflow-y: auto;\n    overflow-x: auto;\n}\n.table td, .table th {\n    padding: 5px;\n    font-size: 14px;\n    text-align:center;\n}\n\n//CRUD Table\n\ntd > div {\n    max-height: 50px;\n    text-align:center;\n    display: inline-block;\n    overflow-y:auto;\n    overflow-x:auto;\n}\n\ntextarea{\n    min-height: 49px;\n    height: auto;\n}\n\n//Big red button. Home page\n.btn-big{\n    height:150px;\n    width:150px;\n    border-radius: 50%;\n    font-size: 25px;\n}\n\n//Json item style\nul.json-dict, ol.json-array{\n    li{\n        list-style: none !important;\n    }\n}",
            "title": "Stylesheets"
        },
        {
            "location": "/stylesheets/#stylesheets",
            "text": "Application uses css libraries as well as custom css.  Core library which is used is  Bootstrap v3.3.7 JS CSS HTML Framework  Custom css is created with the help of  SASS/SCSS Extension",
            "title": "Stylesheets"
        },
        {
            "location": "/stylesheets/#technology-used",
            "text": "Css was written and build from  SASS/SCSS Extension  with  ScoutAPP v2.12.12 SASS/SCSS processor .",
            "title": "Technology Used"
        },
        {
            "location": "/stylesheets/#libraries",
            "text": "Following styling libraries had been used:   Bootstrap JS CSS HTML Framework  Jquery-ui  Jquery Json-Viewer supportive library  Custom modified MkDocs theme library",
            "title": "Libraries"
        },
        {
            "location": "/stylesheets/#custom-css",
            "text": "Custom CSS is written using SCSS extension and consists of two files.  _vars.css  - contains various variables and mixins which are used in main css file.  /*Colors*/\n$uek-red: #8d0126;\n$light-red: #dd4814;\n$background: #f1f1f1;\n$uek-blue: #27018d;\n$uek-green: #004f48;\n/*Mixins*/\n@mixin transform($property){\n  -moz-transform:$property;\n  -webkit-transform:$property;\n  transform:$property;\n}\n/*Extend/Inheritance*/\n%uek-shadow{\n  text-shadow: 1px 1px 3px $uek-red;\n}  uek.css  - main css file which styles the entire application.  @import 'vars';\n/*Left top colored block*/\n.wy-side-nav-search{\n    text-shadow: 2px 2px 8px #000000;\n    background:transparent url(../img/applogo.png) no-repeat left;\n    background-color:white;\n    height:150px;\n    width: 150px;\n}\n\na.icon,a.icon-home{\n    visibility:hidden;\n}\n/*Icon left to title*/\n.fa-home:before, .icon-home:before {\n    content: \"\uf015\";\n}\n.wy-nav-top{\n    margin-top:30px;\n    background-color: $light-red;\n    text-shadow: 2px 2px 8px #000000;\n}\n/*Left bottom line*/\n.rst-versions{\n    border-top:solid 10px #f0f0f0;\n}\n/*Links*/\na{\n    color: $light-red;\n}\n\n#logged_as{\n\n  float: right !important;\n  font-size: 13px;\n  color: #fff;\n  text-shadow: 2px 2px 8px #000000;\n  margin-right:20px;\n\n  a:visited{\n    color: $light-red;\n  }\n  a:hover{\n    color: red;\n    @extend %uek-shadow;\n  }\n}\n\n/*Admin bar*/\n#adminbar{\n    direction: ltr;\n    color: #ccc;\n    font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;\n    height: 32px;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    min-width: 600px;\n    z-index: 99999;\n    background: #484141;\n}\n\n.wy-nav-side{\n    margin-top: 32px;\n    background-color: #484141;\n}\n.wy-nav-content{\n    padding: 3.618em 3.236em;\n    background-color:$background;\n    max-width: 2000px;\n}\n.windows{\n    display:inline-block;\n}\n/*Errors block*/\n.errors{\n    display:inline-block;\n    border: 1px solid #800000;\n    background-color: #F1EBE4;\n    height: 200px;\n    width: 380px;\n    position: relative;\n    top: 20px;\n    margin-left: 60px;\n\n  h2{\n    //background: url(../img/info4.png) no-repeat scroll 10px 2px #006b80c9;\n    background: #006B80 url(../img/info4.png) no-repeat scroll 10px 2px;\n    color: #FFFFFF;\n    text-align: center;\n    font-size: 24px;\n    margin-top: 0;\n    padding: 5px;\n    text-shadow: 2px 2px 0px #000000;\n  }\n}\n\n#err_list{\n    padding:20px;\n}\n\n/*Buttons*/\n#adminbar ul{\n    float:left;\n    top:0;\n    line-height: 32px;\n    font-weight: 500;\n}\n\n.button-left{\n  li{\n    padding-left:10px;\n    padding-right:10px;\n    cursor: pointer;\n    text-align:center;\n  }\n  li:hover{\n    background: #584f4f;\n    @extend %uek-shadow;\n  }\n  li:active{\n    background: black;\n    @extend %uek-shadow;\n  }\n}\n\n/*Sidebar*/\n/*Buttons*/\n.wy-menu-vertical{\n\n  li.current>a, li.current>a:hover{\n    border-top:1px solid $uek-red;\n    background-color: $uek-red;\n    color: white;\n    text-shadow: 1px 1px 2px #000000;\n    border-bottom:1px solid $uek-red;\n    border-right:black solid 1px;\n    position:relative;\n  }\n\n    li.toc-current{\n        background: #d8d7d7;\n    }\n    /*Classes to color buttons */\n    li.blue>a, li.blue>a:hover{\n        border-top:1px solid $uek-blue;\n        background-color: $uek-blue;\n        border-bottom:1px solid $uek-blue;\n\n    }\n    li.green>a, li.green>a:hover{\n        border-top:1px solid $uek-green;\n        background-color: $uek-green;\n        border-bottom:1px solid $uek-green;\n\n    }\n\n  /*arrow on lists*/\n  li.current>a:after{\n    content:'';\n    width:15px;\n    height:15px;\n    background:$background;\n    position:absolute;\n    @include transform(rotate(45deg));\n    top:27%;\n    left:142px;\n    border-left:black solid 1px;\n    border-bottom:black solid 1px;\n  }\n\n  li :active{\n    background-color: black;\n  }\n  li.on a:hover span.toctree-expand, .wy-menu-vertical li.current>a:hover span.toctree-expand{\n    color:white;\n  }\n  li.on a span.toctree-expand, .wy-menu-vertical li.current>a span.toctree-expand{\n    color:white;\n  }\n}\n\n/*Whole panel*/\n/*Change sidebar width*/\n.wy-nav-side, .rst-versions, .wy-menu-vertical{\n    width:150px;\n}\n\n.wy-nav-content-wrap{ /*Content block*/\n    margin-left: 150px;\n    background-color:$background;\n}\n.wy-body-for-nav{\n    background-size: 150px 1px;\n}\n\n\n/*Search app*/\n.headerlink{\n    visibility:hidden;\n}\n.input-group{\n    width:100%;\n}\n/*Remove Bootstrap blue outline*/\n.form-control:focus{\n    border-color: #cccccc;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n}\n/*Application div*/\n.app{\n    display: block;\n    margin: 16px;\n    padding: 23px;\n    border: 1px solid #e5e5e5;\n    box-shadow: 0 1px 1px rgba(0,0,0,.04);\n    background: #fff;\n  h1{\n    font-size:20px;\n  }\n  hr{\n    margin:0;\n  }\n}\n/*Table*/\ntable td{\n    padding: 10px 10px 0 10px;\n}\n.pcont{\n    margin-bottom:10px;\n}\n.tdbutton{\n    padding:0;\n}\nth {\n    text-align:center;\n}\n.invisible{\n    display:none;\n}\n.checkbox{\n    display:inline-block;\n    margin-right: 10px;\n}\n\n//Bootstrap overwrites\n.row{\n    margin-bottom: 5px;\n}\n.col-centered{\n    float: none;\n    margin: 0 auto;\n}\n.table-responsive{\n    max-height: 500px;\n    overflow-y: auto;\n    overflow-x: auto;\n}\n.table td, .table th {\n    padding: 5px;\n    font-size: 14px;\n    text-align:center;\n}\n\n//CRUD Table\n\ntd > div {\n    max-height: 50px;\n    text-align:center;\n    display: inline-block;\n    overflow-y:auto;\n    overflow-x:auto;\n}\n\ntextarea{\n    min-height: 49px;\n    height: auto;\n}\n\n//Big red button. Home page\n.btn-big{\n    height:150px;\n    width:150px;\n    border-radius: 50%;\n    font-size: 25px;\n}\n\n//Json item style\nul.json-dict, ol.json-array{\n    li{\n        list-style: none !important;\n    }\n}",
            "title": "Custom CSS"
        }
    ]
}